
new_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d58  08004d58  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004d58  08004d58  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d58  08004d58  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000078  08004dd8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08004dd8  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdbc  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c17  00000000  00000000  0002be5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002da78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  0002e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018030  00000000  00000000  0002f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee10  00000000  00000000  00047438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae58  00000000  00000000  00056248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e10a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf4  00000000  00000000  000e10f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f3c 	.word	0x08003f3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003f3c 	.word	0x08003f3c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <microDelay>:
float RH = 0;
uint8_t RHI, RHD, TCI, TCD, TFI, TFD;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <microDelay+0x2c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000746:	bf00      	nop
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <microDelay+0x2c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	429a      	cmp	r2, r3
 8000752:	d3f9      	bcc.n	8000748 <microDelay+0x14>
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	200000e8 	.word	0x200000e8

08000764 <DHT22_Start>:

uint8_t DHT22_Start (void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 800077a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	482d      	ldr	r0, [pc, #180]	; (8000848 <DHT22_Start+0xe4>)
 8000792:	f001 f941 	bl	8001a18 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	482a      	ldr	r0, [pc, #168]	; (8000848 <DHT22_Start+0xe4>)
 800079e:	f001 fad6 	bl	8001d4e <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 80007a2:	f240 5014 	movw	r0, #1300	; 0x514
 80007a6:	f7ff ffc5 	bl	8000734 <microDelay>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b0:	4825      	ldr	r0, [pc, #148]	; (8000848 <DHT22_Start+0xe4>)
 80007b2:	f001 facc 	bl	8001d4e <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80007b6:	201e      	movs	r0, #30
 80007b8:	f7ff ffbc 	bl	8000734 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <DHT22_Start+0xe4>)
 80007ca:	f001 f925 	bl	8001a18 <HAL_GPIO_Init>
  microDelay (40);
 80007ce:	2028      	movs	r0, #40	; 0x28
 80007d0:	f7ff ffb0 	bl	8000734 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	481b      	ldr	r0, [pc, #108]	; (8000848 <DHT22_Start+0xe4>)
 80007da:	f001 faa1 	bl	8001d20 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10c      	bne.n	80007fe <DHT22_Start+0x9a>
  {
    microDelay (80);
 80007e4:	2050      	movs	r0, #80	; 0x50
 80007e6:	f7ff ffa5 	bl	8000734 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 80007ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <DHT22_Start+0xe4>)
 80007f0:	f001 fa96 	bl	8001d20 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <DHT22_Start+0x9a>
 80007fa:	2301      	movs	r3, #1
 80007fc:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 80007fe:	f000 fff9 	bl	80017f4 <HAL_GetTick>
 8000802:	4603      	mov	r3, r0
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <DHT22_Start+0xe8>)
 8000806:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000808:	f000 fff4 	bl	80017f4 <HAL_GetTick>
 800080c:	4603      	mov	r3, r0
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <DHT22_Start+0xec>)
 8000810:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000812:	e004      	b.n	800081e <DHT22_Start+0xba>
  {
    cMillis = HAL_GetTick();
 8000814:	f000 ffee 	bl	80017f4 <HAL_GetTick>
 8000818:	4603      	mov	r3, r0
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <DHT22_Start+0xec>)
 800081c:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800081e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <DHT22_Start+0xe4>)
 8000824:	f001 fa7c 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <DHT22_Start+0xd8>
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <DHT22_Start+0xe8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	1c9a      	adds	r2, r3, #2
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <DHT22_Start+0xec>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	d8eb      	bhi.n	8000814 <DHT22_Start+0xb0>
  }
  return Response;
 800083c:	7dfb      	ldrb	r3, [r7, #23]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010c00 	.word	0x40010c00
 800084c:	20000138 	.word	0x20000138
 8000850:	2000013c 	.word	0x2000013c

08000854 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
 800085e:	e066      	b.n	800092e <DHT22_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000860:	f000 ffc8 	bl	80017f4 <HAL_GetTick>
 8000864:	4603      	mov	r3, r0
 8000866:	4a36      	ldr	r2, [pc, #216]	; (8000940 <DHT22_Read+0xec>)
 8000868:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800086a:	f000 ffc3 	bl	80017f4 <HAL_GetTick>
 800086e:	4603      	mov	r3, r0
 8000870:	4a34      	ldr	r2, [pc, #208]	; (8000944 <DHT22_Read+0xf0>)
 8000872:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000874:	e004      	b.n	8000880 <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000876:	f000 ffbd 	bl	80017f4 <HAL_GetTick>
 800087a:	4603      	mov	r3, r0
 800087c:	4a31      	ldr	r2, [pc, #196]	; (8000944 <DHT22_Read+0xf0>)
 800087e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000884:	4830      	ldr	r0, [pc, #192]	; (8000948 <DHT22_Read+0xf4>)
 8000886:	f001 fa4b 	bl	8001d20 <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d106      	bne.n	800089e <DHT22_Read+0x4a>
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <DHT22_Read+0xec>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1c9a      	adds	r2, r3, #2
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <DHT22_Read+0xf0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d8eb      	bhi.n	8000876 <DHT22_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800089e:	2028      	movs	r0, #40	; 0x28
 80008a0:	f7ff ff48 	bl	8000734 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80008a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a8:	4827      	ldr	r0, [pc, #156]	; (8000948 <DHT22_Read+0xf4>)
 80008aa:	f001 fa39 	bl	8001d20 <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d10e      	bne.n	80008d2 <DHT22_Read+0x7e>
      b&= ~(1<<(7-a));
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2201      	movs	r2, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008ca:	4013      	ands	r3, r2
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	71bb      	strb	r3, [r7, #6]
 80008d0:	e00b      	b.n	80008ea <DHT22_Read+0x96>
    else
      b|= (1<<(7-a));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f1c3 0307 	rsb	r3, r3, #7
 80008d8:	2201      	movs	r2, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	b25a      	sxtb	r2, r3
 80008e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80008ea:	f000 ff83 	bl	80017f4 <HAL_GetTick>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <DHT22_Read+0xec>)
 80008f2:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80008f4:	f000 ff7e 	bl	80017f4 <HAL_GetTick>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <DHT22_Read+0xf0>)
 80008fc:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80008fe:	e004      	b.n	800090a <DHT22_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000900:	f000 ff78 	bl	80017f4 <HAL_GetTick>
 8000904:	4603      	mov	r3, r0
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <DHT22_Read+0xf0>)
 8000908:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800090a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <DHT22_Read+0xf4>)
 8000910:	f001 fa06 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d006      	beq.n	8000928 <DHT22_Read+0xd4>
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <DHT22_Read+0xec>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1c9a      	adds	r2, r3, #2
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <DHT22_Read+0xf0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d8eb      	bhi.n	8000900 <DHT22_Read+0xac>
  for (a=0;a<8;a++)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	3301      	adds	r3, #1
 800092c:	71fb      	strb	r3, [r7, #7]
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b07      	cmp	r3, #7
 8000932:	d995      	bls.n	8000860 <DHT22_Read+0xc>
    }
  }
  return b;
 8000934:	79bb      	ldrb	r3, [r7, #6]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000138 	.word	0x20000138
 8000944:	2000013c 	.word	0x2000013c
 8000948:	40010c00 	.word	0x40010c00

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b598      	push	{r3, r4, r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fef8 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 fa0c 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 face 	bl	8000ef8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800095c:	f000 fa4e 	bl	8000dfc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000960:	f000 fa7a 	bl	8000e58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000964:	4884      	ldr	r0, [pc, #528]	; (8000b78 <main+0x22c>)
 8000966:	f002 fbd9 	bl	800311c <HAL_TIM_Base_Start>
    SSD1306_Init();
 800096a:	f000 fb17 	bl	8000f9c <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DHT22_Start())
 800096e:	f7ff fef9 	bl	8000764 <DHT22_Start>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 81db 	beq.w	8000d30 <main+0x3e4>
	      {
	        RH1 = DHT22_Read(); // First 8bits of humidity
 800097a:	f7ff ff6b 	bl	8000854 <DHT22_Read>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b7e      	ldr	r3, [pc, #504]	; (8000b7c <main+0x230>)
 8000984:	701a      	strb	r2, [r3, #0]
	        RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8000986:	f7ff ff65 	bl	8000854 <DHT22_Read>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b7c      	ldr	r3, [pc, #496]	; (8000b80 <main+0x234>)
 8000990:	701a      	strb	r2, [r3, #0]
	        TC1 = DHT22_Read(); // First 8bits of Celsius
 8000992:	f7ff ff5f 	bl	8000854 <DHT22_Read>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b7a      	ldr	r3, [pc, #488]	; (8000b84 <main+0x238>)
 800099c:	701a      	strb	r2, [r3, #0]
	        TC2 = DHT22_Read(); // Second 8bits of Celsius
 800099e:	f7ff ff59 	bl	8000854 <DHT22_Read>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b78      	ldr	r3, [pc, #480]	; (8000b88 <main+0x23c>)
 80009a8:	701a      	strb	r2, [r3, #0]
	        SUM = DHT22_Read(); // Check sum
 80009aa:	f7ff ff53 	bl	8000854 <DHT22_Read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b76      	ldr	r3, [pc, #472]	; (8000b8c <main+0x240>)
 80009b4:	701a      	strb	r2, [r3, #0]
	        CHECK = RH1 + RH2 + TC1 + TC2;
 80009b6:	4b71      	ldr	r3, [pc, #452]	; (8000b7c <main+0x230>)
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	4b71      	ldr	r3, [pc, #452]	; (8000b80 <main+0x234>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b70      	ldr	r3, [pc, #448]	; (8000b84 <main+0x238>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b6f      	ldr	r3, [pc, #444]	; (8000b88 <main+0x23c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b6f      	ldr	r3, [pc, #444]	; (8000b90 <main+0x244>)
 80009d4:	701a      	strb	r2, [r3, #0]
	        if (CHECK == SUM)
 80009d6:	4b6e      	ldr	r3, [pc, #440]	; (8000b90 <main+0x244>)
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <main+0x240>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	f040 81a6 	bne.w	8000d30 <main+0x3e4>
	        {
	          if (TC1>127) // If TC1=10000000, negative temperature
 80009e4:	4b67      	ldr	r3, [pc, #412]	; (8000b84 <main+0x238>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	da0f      	bge.n	8000a0e <main+0xc2>
	          {
	            tCelsius = (float)TC2/10*(-1);
 80009ee:	4b66      	ldr	r3, [pc, #408]	; (8000b88 <main+0x23c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc60 	bl	80002b8 <__aeabi_ui2f>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4966      	ldr	r1, [pc, #408]	; (8000b94 <main+0x248>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fd67 	bl	80004d0 <__aeabi_fdiv>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000a08:	4a63      	ldr	r2, [pc, #396]	; (8000b98 <main+0x24c>)
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e011      	b.n	8000a32 <main+0xe6>
	          }
	          else
	          {
	            tCelsius = (float)((TC1<<8)|TC2)/10;
 8000a0e:	4b5d      	ldr	r3, [pc, #372]	; (8000b84 <main+0x238>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	4a5c      	ldr	r2, [pc, #368]	; (8000b88 <main+0x23c>)
 8000a16:	7812      	ldrb	r2, [r2, #0]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fc50 	bl	80002c0 <__aeabi_i2f>
 8000a20:	4603      	mov	r3, r0
 8000a22:	495c      	ldr	r1, [pc, #368]	; (8000b94 <main+0x248>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fd53 	bl	80004d0 <__aeabi_fdiv>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b5a      	ldr	r3, [pc, #360]	; (8000b98 <main+0x24c>)
 8000a30:	601a      	str	r2, [r3, #0]
	          }
	          tFahrenheit = tCelsius * 9/5 + 32;
 8000a32:	4b59      	ldr	r3, [pc, #356]	; (8000b98 <main+0x24c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4959      	ldr	r1, [pc, #356]	; (8000b9c <main+0x250>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fc95 	bl	8000368 <__aeabi_fmul>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4957      	ldr	r1, [pc, #348]	; (8000ba0 <main+0x254>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fd44 	bl	80004d0 <__aeabi_fdiv>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fb82 	bl	8000158 <__addsf3>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <main+0x258>)
 8000a5a:	601a      	str	r2, [r3, #0]
	          RH = (float) ((RH1<<8)|RH2)/10;
 8000a5c:	4b47      	ldr	r3, [pc, #284]	; (8000b7c <main+0x230>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	4a47      	ldr	r2, [pc, #284]	; (8000b80 <main+0x234>)
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fc29 	bl	80002c0 <__aeabi_i2f>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4948      	ldr	r1, [pc, #288]	; (8000b94 <main+0x248>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd2c 	bl	80004d0 <__aeabi_fdiv>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ba8 <main+0x25c>)
 8000a7e:	601a      	str	r2, [r3, #0]
	          SSD1306_GotoXY (0, 0);
 8000a80:	2100      	movs	r1, #0
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fbf2 	bl	800126c <SSD1306_GotoXY>
	          RHI = RH;  // Relative humidity integral
 8000a88:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <main+0x25c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fe31 	bl	80006f4 <__aeabi_f2uiz>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b45      	ldr	r3, [pc, #276]	; (8000bac <main+0x260>)
 8000a98:	701a      	strb	r2, [r3, #0]
	          RHD = RH*10-RHI*10; // Relative humidity decimal
 8000a9a:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <main+0x25c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	493d      	ldr	r1, [pc, #244]	; (8000b94 <main+0x248>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fc61 	bl	8000368 <__aeabi_fmul>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461c      	mov	r4, r3
 8000aaa:	4b40      	ldr	r3, [pc, #256]	; (8000bac <main+0x260>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fc01 	bl	80002c0 <__aeabi_i2f>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f7ff fb46 	bl	8000154 <__aeabi_fsub>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe12 	bl	80006f4 <__aeabi_f2uiz>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <main+0x264>)
 8000ad6:	701a      	strb	r2, [r3, #0]
	          sprintf(strCopy,"Hum %d.%d %%", RHI, RHD);
 8000ad8:	4b34      	ldr	r3, [pc, #208]	; (8000bac <main+0x260>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <main+0x264>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4934      	ldr	r1, [pc, #208]	; (8000bb4 <main+0x268>)
 8000ae4:	4834      	ldr	r0, [pc, #208]	; (8000bb8 <main+0x26c>)
 8000ae6:	f002 fdaf 	bl	8003648 <siprintf>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	4933      	ldr	r1, [pc, #204]	; (8000bbc <main+0x270>)
 8000aee:	4832      	ldr	r0, [pc, #200]	; (8000bb8 <main+0x26c>)
 8000af0:	f000 fc52 	bl	8001398 <SSD1306_Puts>
	          SSD1306_GotoXY (0, 20);
 8000af4:	2114      	movs	r1, #20
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 fbb8 	bl	800126c <SSD1306_GotoXY>
	          if (tCelsius < 0)
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <main+0x24c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f04f 0100 	mov.w	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fdcd 	bl	80006a4 <__aeabi_fcmplt>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d05f      	beq.n	8000bd0 <main+0x284>
	          {
	            TCI = tCelsius *(-1);  // Celsius integral
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <main+0x24c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fdeb 	bl	80006f4 <__aeabi_f2uiz>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <main+0x274>)
 8000b24:	701a      	strb	r2, [r3, #0]
	            TCD = tCelsius*(-10)-TCI*10; // Celsius decimal
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <main+0x24c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4926      	ldr	r1, [pc, #152]	; (8000bc4 <main+0x278>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fc1b 	bl	8000368 <__aeabi_fmul>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461c      	mov	r4, r3
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <main+0x274>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fbbb 	bl	80002c0 <__aeabi_i2f>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f7ff fb00 	bl	8000154 <__aeabi_fsub>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fdcc 	bl	80006f4 <__aeabi_f2uiz>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <main+0x27c>)
 8000b62:	701a      	strb	r2, [r3, #0]
	            sprintf(strCopy,"Temp -%d.%d C", TCI, TCD);
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <main+0x274>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <main+0x27c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4917      	ldr	r1, [pc, #92]	; (8000bcc <main+0x280>)
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <main+0x26c>)
 8000b72:	f002 fd69 	bl	8003648 <siprintf>
 8000b76:	e05c      	b.n	8000c32 <main+0x2e6>
 8000b78:	200000e8 	.word	0x200000e8
 8000b7c:	20000130 	.word	0x20000130
 8000b80:	20000131 	.word	0x20000131
 8000b84:	20000132 	.word	0x20000132
 8000b88:	20000133 	.word	0x20000133
 8000b8c:	20000134 	.word	0x20000134
 8000b90:	20000135 	.word	0x20000135
 8000b94:	41200000 	.word	0x41200000
 8000b98:	20000140 	.word	0x20000140
 8000b9c:	41100000 	.word	0x41100000
 8000ba0:	40a00000 	.word	0x40a00000
 8000ba4:	20000144 	.word	0x20000144
 8000ba8:	20000148 	.word	0x20000148
 8000bac:	2000014c 	.word	0x2000014c
 8000bb0:	2000014d 	.word	0x2000014d
 8000bb4:	08003f54 	.word	0x08003f54
 8000bb8:	20000154 	.word	0x20000154
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	2000014e 	.word	0x2000014e
 8000bc4:	c1200000 	.word	0xc1200000
 8000bc8:	2000014f 	.word	0x2000014f
 8000bcc:	08003f64 	.word	0x08003f64
	          }
	          else
	          {
	            TCI = tCelsius;  // Celsius integral
 8000bd0:	4b5a      	ldr	r3, [pc, #360]	; (8000d3c <main+0x3f0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fd8d 	bl	80006f4 <__aeabi_f2uiz>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <main+0x3f4>)
 8000be0:	701a      	strb	r2, [r3, #0]
	            TCD = tCelsius*10-TCI*10; // Celsius decimal
 8000be2:	4b56      	ldr	r3, [pc, #344]	; (8000d3c <main+0x3f0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4957      	ldr	r1, [pc, #348]	; (8000d44 <main+0x3f8>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fbbd 	bl	8000368 <__aeabi_fmul>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461c      	mov	r4, r3
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <main+0x3f4>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fb5d 	bl	80002c0 <__aeabi_i2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f7ff faa2 	bl	8000154 <__aeabi_fsub>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fd6e 	bl	80006f4 <__aeabi_f2uiz>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <main+0x3fc>)
 8000c1e:	701a      	strb	r2, [r3, #0]
	            sprintf(strCopy,"Temp %d.%d C", TCI, TCD);
 8000c20:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <main+0x3f4>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b48      	ldr	r3, [pc, #288]	; (8000d48 <main+0x3fc>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4948      	ldr	r1, [pc, #288]	; (8000d4c <main+0x400>)
 8000c2c:	4848      	ldr	r0, [pc, #288]	; (8000d50 <main+0x404>)
 8000c2e:	f002 fd0b 	bl	8003648 <siprintf>
	          }
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000c32:	2201      	movs	r2, #1
 8000c34:	4947      	ldr	r1, [pc, #284]	; (8000d54 <main+0x408>)
 8000c36:	4846      	ldr	r0, [pc, #280]	; (8000d50 <main+0x404>)
 8000c38:	f000 fbae 	bl	8001398 <SSD1306_Puts>
	          SSD1306_GotoXY (0, 40);
 8000c3c:	2128      	movs	r1, #40	; 0x28
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 fb14 	bl	800126c <SSD1306_GotoXY>
	          if(tFahrenheit < 0)
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <main+0x40c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f04f 0100 	mov.w	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fd29 	bl	80006a4 <__aeabi_fcmplt>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d033      	beq.n	8000cc0 <main+0x374>
	          {
	            TFI = tFahrenheit*(-1);  // Fahrenheit integral
 8000c58:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <main+0x40c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fd47 	bl	80006f4 <__aeabi_f2uiz>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <main+0x410>)
 8000c6c:	701a      	strb	r2, [r3, #0]
	            TFD = tFahrenheit*(-10)-TFI*10; // Fahrenheit decimal
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <main+0x40c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	493b      	ldr	r1, [pc, #236]	; (8000d60 <main+0x414>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fb77 	bl	8000368 <__aeabi_fmul>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461c      	mov	r4, r3
 8000c7e:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <main+0x410>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fb17 	bl	80002c0 <__aeabi_i2f>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff fa5c 	bl	8000154 <__aeabi_fsub>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd28 	bl	80006f4 <__aeabi_f2uiz>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <main+0x418>)
 8000caa:	701a      	strb	r2, [r3, #0]
	            sprintf(strCopy,"Fah -%d.%d F", TFI, TFD);
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <main+0x410>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <main+0x418>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	492c      	ldr	r1, [pc, #176]	; (8000d68 <main+0x41c>)
 8000cb8:	4825      	ldr	r0, [pc, #148]	; (8000d50 <main+0x404>)
 8000cba:	f002 fcc5 	bl	8003648 <siprintf>
 8000cbe:	e030      	b.n	8000d22 <main+0x3d6>
	          }
	          else
	          {
	            TFI = tFahrenheit;  // Fahrenheit integral
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <main+0x40c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd15 	bl	80006f4 <__aeabi_f2uiz>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <main+0x410>)
 8000cd0:	701a      	strb	r2, [r3, #0]
	            TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <main+0x40c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	491b      	ldr	r1, [pc, #108]	; (8000d44 <main+0x3f8>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fb45 	bl	8000368 <__aeabi_fmul>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461c      	mov	r4, r3
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <main+0x410>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fae5 	bl	80002c0 <__aeabi_i2f>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f7ff fa2a 	bl	8000154 <__aeabi_fsub>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fcf6 	bl	80006f4 <__aeabi_f2uiz>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <main+0x418>)
 8000d0e:	701a      	strb	r2, [r3, #0]
	            sprintf(strCopy,"Fah %d.%d F", TFI, TFD);
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <main+0x410>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <main+0x418>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4914      	ldr	r1, [pc, #80]	; (8000d6c <main+0x420>)
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <main+0x404>)
 8000d1e:	f002 fc93 	bl	8003648 <siprintf>
	          }
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	490b      	ldr	r1, [pc, #44]	; (8000d54 <main+0x408>)
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <main+0x404>)
 8000d28:	f000 fb36 	bl	8001398 <SSD1306_Puts>
	          SSD1306_UpdateScreen();
 8000d2c:	f000 f9fa 	bl	8001124 <SSD1306_UpdateScreen>
	        }
	      }
	      HAL_Delay(1000);
 8000d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d34:	f000 fd68 	bl	8001808 <HAL_Delay>
	  if(DHT22_Start())
 8000d38:	e619      	b.n	800096e <main+0x22>
 8000d3a:	bf00      	nop
 8000d3c:	20000140 	.word	0x20000140
 8000d40:	2000014e 	.word	0x2000014e
 8000d44:	41200000 	.word	0x41200000
 8000d48:	2000014f 	.word	0x2000014f
 8000d4c:	08003f74 	.word	0x08003f74
 8000d50:	20000154 	.word	0x20000154
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000144 	.word	0x20000144
 8000d5c:	20000150 	.word	0x20000150
 8000d60:	c1200000 	.word	0xc1200000
 8000d64:	20000151 	.word	0x20000151
 8000d68:	08003f84 	.word	0x08003f84
 8000d6c:	08003f94 	.word	0x08003f94

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b090      	sub	sp, #64	; 0x40
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	2228      	movs	r2, #40	; 0x28
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fc5a 	bl	8003638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	2302      	movs	r3, #2
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fd59 	bl	8002870 <HAL_RCC_OscConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dc4:	f000 f8e4 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc8:	230f      	movs	r3, #15
 8000dca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2102      	movs	r1, #2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 ffc6 	bl	8002d74 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dee:	f000 f8cf 	bl	8000f90 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3740      	adds	r7, #64	; 0x40
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e02:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <MX_I2C1_Init+0x54>)
 8000e04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x58>)
 8000e0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_I2C1_Init+0x50>)
 8000e3a:	f000 ffa1 	bl	8001d80 <HAL_I2C_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e44:	f000 f8a4 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000094 	.word	0x20000094
 8000e50:	40005400 	.word	0x40005400
 8000e54:	00061a80 	.word	0x00061a80

08000e58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000e76:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <MX_TIM1_Init+0x9c>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000e7c:	2247      	movs	r2, #71	; 0x47
 8000e7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000ea2:	f002 f8eb 	bl	800307c <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000eac:	f000 f870 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000ebe:	f002 f977 	bl	80031b0 <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ec8:	f000 f862 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_TIM1_Init+0x98>)
 8000eda:	f002 fb25 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ee4:	f000 f854 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000e8 	.word	0x200000e8
 8000ef4:	40012c00 	.word	0x40012c00

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0320 	and.w	r3, r3, #32
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_GPIO_Init+0x90>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_GPIO_Init+0x94>)
 8000f5c:	f000 fef7 	bl	8001d4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4619      	mov	r1, r3
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_GPIO_Init+0x94>)
 8000f7a:	f000 fd4d 	bl	8001a18 <HAL_GPIO_Init>

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000fa2:	f000 fa1f 	bl	80013e4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000fa6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000faa:	2201      	movs	r2, #1
 8000fac:	2178      	movs	r1, #120	; 0x78
 8000fae:	485b      	ldr	r0, [pc, #364]	; (800111c <SSD1306_Init+0x180>)
 8000fb0:	f001 f928 	bl	8002204 <HAL_I2C_IsDeviceReady>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e0a9      	b.n	8001112 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000fbe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000fc2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fc4:	e002      	b.n	8000fcc <SSD1306_Init+0x30>
		p--;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f9      	bne.n	8000fc6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fd2:	22ae      	movs	r2, #174	; 0xae
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2078      	movs	r0, #120	; 0x78
 8000fd8:	f000 fa7e 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000fdc:	2220      	movs	r2, #32
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2078      	movs	r0, #120	; 0x78
 8000fe2:	f000 fa79 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2078      	movs	r0, #120	; 0x78
 8000fec:	f000 fa74 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ff0:	22b0      	movs	r2, #176	; 0xb0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2078      	movs	r0, #120	; 0x78
 8000ff6:	f000 fa6f 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000ffa:	22c8      	movs	r2, #200	; 0xc8
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	; 0x78
 8001000:	f000 fa6a 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2078      	movs	r0, #120	; 0x78
 800100a:	f000 fa65 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800100e:	2210      	movs	r2, #16
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	; 0x78
 8001014:	f000 fa60 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001018:	2240      	movs	r2, #64	; 0x40
 800101a:	2100      	movs	r1, #0
 800101c:	2078      	movs	r0, #120	; 0x78
 800101e:	f000 fa5b 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001022:	2281      	movs	r2, #129	; 0x81
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	; 0x78
 8001028:	f000 fa56 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800102c:	22ff      	movs	r2, #255	; 0xff
 800102e:	2100      	movs	r1, #0
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f000 fa51 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001036:	22a1      	movs	r2, #161	; 0xa1
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 fa4c 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001040:	22a6      	movs	r2, #166	; 0xa6
 8001042:	2100      	movs	r1, #0
 8001044:	2078      	movs	r0, #120	; 0x78
 8001046:	f000 fa47 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800104a:	22a8      	movs	r2, #168	; 0xa8
 800104c:	2100      	movs	r1, #0
 800104e:	2078      	movs	r0, #120	; 0x78
 8001050:	f000 fa42 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001054:	223f      	movs	r2, #63	; 0x3f
 8001056:	2100      	movs	r1, #0
 8001058:	2078      	movs	r0, #120	; 0x78
 800105a:	f000 fa3d 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800105e:	22a4      	movs	r2, #164	; 0xa4
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 fa38 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001068:	22d3      	movs	r2, #211	; 0xd3
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fa33 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 fa2e 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800107c:	22d5      	movs	r2, #213	; 0xd5
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 fa29 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001086:	22f0      	movs	r2, #240	; 0xf0
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 fa24 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001090:	22d9      	movs	r2, #217	; 0xd9
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 fa1f 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800109a:	2222      	movs	r2, #34	; 0x22
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 fa1a 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80010a4:	22da      	movs	r2, #218	; 0xda
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 fa15 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80010ae:	2212      	movs	r2, #18
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 fa10 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80010b8:	22db      	movs	r2, #219	; 0xdb
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 fa0b 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010c2:	2220      	movs	r2, #32
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 fa06 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010cc:	228d      	movs	r2, #141	; 0x8d
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 fa01 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010d6:	2214      	movs	r2, #20
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 f9fc 	bl	80014d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010e0:	22af      	movs	r2, #175	; 0xaf
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 f9f7 	bl	80014d8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010ea:	222e      	movs	r2, #46	; 0x2e
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 f9f2 	bl	80014d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 f843 	bl	8001180 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80010fa:	f000 f813 	bl	8001124 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <SSD1306_Init+0x184>)
 8001100:	2200      	movs	r2, #0
 8001102:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SSD1306_Init+0x184>)
 8001106:	2200      	movs	r2, #0
 8001108:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SSD1306_Init+0x184>)
 800110c:	2201      	movs	r2, #1
 800110e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000094 	.word	0x20000094
 8001120:	20000564 	.word	0x20000564

08001124 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	e01d      	b.n	800116c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3b50      	subs	r3, #80	; 0x50
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f000 f9cc 	bl	80014d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2078      	movs	r0, #120	; 0x78
 8001146:	f000 f9c7 	bl	80014d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800114a:	2210      	movs	r2, #16
 800114c:	2100      	movs	r1, #0
 800114e:	2078      	movs	r0, #120	; 0x78
 8001150:	f000 f9c2 	bl	80014d8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	01db      	lsls	r3, r3, #7
 8001158:	4a08      	ldr	r2, [pc, #32]	; (800117c <SSD1306_UpdateScreen+0x58>)
 800115a:	441a      	add	r2, r3
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	2078      	movs	r0, #120	; 0x78
 8001162:	f000 f953 	bl	800140c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	3301      	adds	r3, #1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b07      	cmp	r3, #7
 8001170:	d9de      	bls.n	8001130 <SSD1306_UpdateScreen+0xc>
	}
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000164 	.word	0x20000164

08001180 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <SSD1306_Fill+0x14>
 8001190:	2300      	movs	r3, #0
 8001192:	e000      	b.n	8001196 <SSD1306_Fill+0x16>
 8001194:	23ff      	movs	r3, #255	; 0xff
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119a:	4619      	mov	r1, r3
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <SSD1306_Fill+0x2c>)
 800119e:	f002 fa4b 	bl	8003638 <memset>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000164 	.word	0x20000164

080011b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	460b      	mov	r3, r1
 80011bc:	80bb      	strh	r3, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	70fb      	strb	r3, [r7, #3]
	if (
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	2b7f      	cmp	r3, #127	; 0x7f
 80011c6:	d848      	bhi.n	800125a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	2b3f      	cmp	r3, #63	; 0x3f
 80011cc:	d845      	bhi.n	800125a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <SSD1306_DrawPixel+0xb4>)
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf0c      	ite	eq
 80011dc:	2301      	moveq	r3, #1
 80011de:	2300      	movne	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d11a      	bne.n	8001220 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	88bb      	ldrh	r3, [r7, #4]
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	b298      	uxth	r0, r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	01db      	lsls	r3, r3, #7
 80011f6:	4413      	add	r3, r2
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <SSD1306_DrawPixel+0xb8>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	b25a      	sxtb	r2, r3
 80011fe:	88bb      	ldrh	r3, [r7, #4]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	2101      	movs	r1, #1
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	b25b      	sxtb	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b259      	sxtb	r1, r3
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	4603      	mov	r3, r0
 8001214:	01db      	lsls	r3, r3, #7
 8001216:	4413      	add	r3, r2
 8001218:	b2c9      	uxtb	r1, r1
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <SSD1306_DrawPixel+0xb8>)
 800121c:	54d1      	strb	r1, [r2, r3]
 800121e:	e01d      	b.n	800125c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001220:	88fa      	ldrh	r2, [r7, #6]
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	b298      	uxth	r0, r3
 8001228:	4603      	mov	r3, r0
 800122a:	01db      	lsls	r3, r3, #7
 800122c:	4413      	add	r3, r2
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <SSD1306_DrawPixel+0xb8>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	b25a      	sxtb	r2, r3
 8001234:	88bb      	ldrh	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	b25b      	sxtb	r3, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	b25b      	sxtb	r3, r3
 8001246:	4013      	ands	r3, r2
 8001248:	b259      	sxtb	r1, r3
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	4603      	mov	r3, r0
 800124e:	01db      	lsls	r3, r3, #7
 8001250:	4413      	add	r3, r2
 8001252:	b2c9      	uxtb	r1, r1
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <SSD1306_DrawPixel+0xb8>)
 8001256:	54d1      	strb	r1, [r2, r3]
 8001258:	e000      	b.n	800125c <SSD1306_DrawPixel+0xac>
		return;
 800125a:	bf00      	nop
	}
}
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000564 	.word	0x20000564
 8001268:	20000164 	.word	0x20000164

0800126c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	80fb      	strh	r3, [r7, #6]
 8001278:	4613      	mov	r3, r2
 800127a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SSD1306_GotoXY+0x28>)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <SSD1306_GotoXY+0x28>)
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	8053      	strh	r3, [r2, #2]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000564 	.word	0x20000564

08001298 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <SSD1306_Putc+0xfc>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
	if (
 80012b4:	2b7f      	cmp	r3, #127	; 0x7f
 80012b6:	dc07      	bgt.n	80012c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <SSD1306_Putc+0xfc>)
 80012ba:	885b      	ldrh	r3, [r3, #2]
 80012bc:	461a      	mov	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012c4:	2b3f      	cmp	r3, #63	; 0x3f
 80012c6:	dd01      	ble.n	80012cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e05e      	b.n	800138a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e04b      	b.n	800136a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	3b20      	subs	r3, #32
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	7849      	ldrb	r1, [r1, #1]
 80012de:	fb01 f303 	mul.w	r3, r1, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	440b      	add	r3, r1
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e030      	b.n	8001358 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <SSD1306_Putc+0xfc>)
 8001308:	881a      	ldrh	r2, [r3, #0]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b298      	uxth	r0, r3
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <SSD1306_Putc+0xfc>)
 8001314:	885a      	ldrh	r2, [r3, #2]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	b29b      	uxth	r3, r3
 800131a:	4413      	add	r3, r2
 800131c:	b29b      	uxth	r3, r3
 800131e:	79ba      	ldrb	r2, [r7, #6]
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff ff45 	bl	80011b0 <SSD1306_DrawPixel>
 8001326:	e014      	b.n	8001352 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <SSD1306_Putc+0xfc>)
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b298      	uxth	r0, r3
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <SSD1306_Putc+0xfc>)
 8001336:	885a      	ldrh	r2, [r3, #2]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	b299      	uxth	r1, r3
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	2b00      	cmp	r3, #0
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	f7ff ff2f 	bl	80011b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	3301      	adds	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4293      	cmp	r3, r2
 8001362:	d3c8      	bcc.n	80012f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	461a      	mov	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4293      	cmp	r3, r2
 8001374:	d3ad      	bcc.n	80012d2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <SSD1306_Putc+0xfc>)
 8001378:	881a      	ldrh	r2, [r3, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <SSD1306_Putc+0xfc>)
 8001386:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001388:	79fb      	ldrb	r3, [r7, #7]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000564 	.word	0x20000564

08001398 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	4613      	mov	r3, r2
 80013a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80013a6:	e012      	b.n	80013ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff71 	bl	8001298 <SSD1306_Putc>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d002      	beq.n	80013c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	e008      	b.n	80013da <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1e8      	bne.n	80013a8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	781b      	ldrb	r3, [r3, #0]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <ssd1306_I2C_Init+0x24>)
 80013ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013ee:	e002      	b.n	80013f6 <ssd1306_I2C_Init+0x12>
		p--;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f9      	bne.n	80013f0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	0003d090 	.word	0x0003d090

0800140c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b0c7      	sub	sp, #284	; 0x11c
 8001410:	af02      	add	r7, sp, #8
 8001412:	4604      	mov	r4, r0
 8001414:	4608      	mov	r0, r1
 8001416:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800141a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800141e:	600a      	str	r2, [r1, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001426:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800142a:	4622      	mov	r2, r4
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001432:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001436:	4602      	mov	r2, r0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800143e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001442:	460a      	mov	r2, r1
 8001444:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001446:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800144a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800144e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001452:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001460:	e015      	b.n	800148e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001462:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001466:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800146a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	441a      	add	r2, r3
 8001472:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001476:	3301      	adds	r3, #1
 8001478:	7811      	ldrb	r1, [r2, #0]
 800147a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800147e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001482:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001484:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001488:	3301      	adds	r3, #1
 800148a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800148e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001492:	b29b      	uxth	r3, r3
 8001494:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001498:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d8df      	bhi.n	8001462 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80014a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b299      	uxth	r1, r3
 80014ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f107 020c 	add.w	r2, r7, #12
 80014c0:	200a      	movs	r0, #10
 80014c2:	9000      	str	r0, [sp, #0]
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80014c6:	f000 fd9f 	bl	8002008 <HAL_I2C_Master_Transmit>
}
 80014ca:	bf00      	nop
 80014cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}
 80014d4:	20000094 	.word	0x20000094

080014d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	460b      	mov	r3, r1
 80014e4:	71bb      	strb	r3, [r7, #6]
 80014e6:	4613      	mov	r3, r2
 80014e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014ee:	797b      	ldrb	r3, [r7, #5]
 80014f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	b299      	uxth	r1, r3
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	230a      	movs	r3, #10
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2302      	movs	r3, #2
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <ssd1306_I2C_Write+0x38>)
 8001502:	f000 fd81 	bl	8002008 <HAL_I2C_Master_Transmit>
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000094 	.word	0x20000094

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_MspInit+0x5c>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_MspInit+0x5c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_MspInit+0x5c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x5c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x5c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x5c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_MspInit+0x60>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_MspInit+0x60>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000

08001578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_I2C_MspInit+0x70>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d123      	bne.n	80015e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_I2C_MspInit+0x74>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a13      	ldr	r2, [pc, #76]	; (80015ec <HAL_I2C_MspInit+0x74>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_I2C_MspInit+0x74>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b0:	23c0      	movs	r3, #192	; 0xc0
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <HAL_I2C_MspInit+0x78>)
 80015c4:	f000 fa28 	bl	8001a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_I2C_MspInit+0x74>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_I2C_MspInit+0x74>)
 80015ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d2:	61d3      	str	r3, [r2, #28]
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_I2C_MspInit+0x74>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40005400 	.word	0x40005400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010c00 	.word	0x40010c00

080015f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a09      	ldr	r2, [pc, #36]	; (8001628 <HAL_TIM_Base_MspInit+0x34>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d10b      	bne.n	800161e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_TIM_Base_MspInit+0x38>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_TIM_Base_MspInit+0x38>)
 800160c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_TIM_Base_MspInit+0x38>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40012c00 	.word	0x40012c00
 800162c:	40021000 	.word	0x40021000

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001676:	f000 f8ab 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f001 ff98 	bl	80035e4 <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20005000 	.word	0x20005000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	2000056c 	.word	0x2000056c
 80016e8:	20000588 	.word	0x20000588

080016ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	; (800173c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800171e:	f7ff ffe5 	bl	80016ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f001 ff65 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001726:	f7ff f911 	bl	800094c <main>
  bx lr
 800172a:	4770      	bx	lr
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001734:	08004d60 	.word	0x08004d60
  ldr r2, =_sbss
 8001738:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800173c:	20000584 	.word	0x20000584

08001740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_2_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x28>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x28>)
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f92b 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	200f      	movs	r0, #15
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff fed8 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f935 	bl	80019fe <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f90b 	bl	80019c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000010 	.word	0x20000010
 80017cc:	2000000c 	.word	0x2000000c

080017d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_IncTick+0x1c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_IncTick+0x20>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <HAL_IncTick+0x20>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	20000010 	.word	0x20000010
 80017f0:	20000570 	.word	0x20000570

080017f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_GetTick+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000570 	.word	0x20000570

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff fff0 	bl	80017f4 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffe0 	bl	80017f4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000010 	.word	0x20000010

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f7ff ff90 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff49 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff5e 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff90 	bl	8001908 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5f 	bl	80018b4 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffb0 	bl	800196c <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b08b      	sub	sp, #44	; 0x2c
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	e169      	b.n	8001d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8158 	bne.w	8001cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a9a      	ldr	r2, [pc, #616]	; (8001cb8 <HAL_GPIO_Init+0x2a0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d05e      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a54:	4a98      	ldr	r2, [pc, #608]	; (8001cb8 <HAL_GPIO_Init+0x2a0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d875      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a5a:	4a98      	ldr	r2, [pc, #608]	; (8001cbc <HAL_GPIO_Init+0x2a4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d058      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a60:	4a96      	ldr	r2, [pc, #600]	; (8001cbc <HAL_GPIO_Init+0x2a4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d86f      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a66:	4a96      	ldr	r2, [pc, #600]	; (8001cc0 <HAL_GPIO_Init+0x2a8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d052      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a6c:	4a94      	ldr	r2, [pc, #592]	; (8001cc0 <HAL_GPIO_Init+0x2a8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d869      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a72:	4a94      	ldr	r2, [pc, #592]	; (8001cc4 <HAL_GPIO_Init+0x2ac>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d04c      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a78:	4a92      	ldr	r2, [pc, #584]	; (8001cc4 <HAL_GPIO_Init+0x2ac>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d863      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a7e:	4a92      	ldr	r2, [pc, #584]	; (8001cc8 <HAL_GPIO_Init+0x2b0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d046      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a84:	4a90      	ldr	r2, [pc, #576]	; (8001cc8 <HAL_GPIO_Init+0x2b0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d85d      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d82a      	bhi.n	8001ae4 <HAL_GPIO_Init+0xcc>
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d859      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <HAL_GPIO_Init+0x80>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001b13 	.word	0x08001b13
 8001a9c:	08001aed 	.word	0x08001aed
 8001aa0:	08001aff 	.word	0x08001aff
 8001aa4:	08001b41 	.word	0x08001b41
 8001aa8:	08001b47 	.word	0x08001b47
 8001aac:	08001b47 	.word	0x08001b47
 8001ab0:	08001b47 	.word	0x08001b47
 8001ab4:	08001b47 	.word	0x08001b47
 8001ab8:	08001b47 	.word	0x08001b47
 8001abc:	08001b47 	.word	0x08001b47
 8001ac0:	08001b47 	.word	0x08001b47
 8001ac4:	08001b47 	.word	0x08001b47
 8001ac8:	08001b47 	.word	0x08001b47
 8001acc:	08001b47 	.word	0x08001b47
 8001ad0:	08001b47 	.word	0x08001b47
 8001ad4:	08001b47 	.word	0x08001b47
 8001ad8:	08001b47 	.word	0x08001b47
 8001adc:	08001af5 	.word	0x08001af5
 8001ae0:	08001b09 	.word	0x08001b09
 8001ae4:	4a79      	ldr	r2, [pc, #484]	; (8001ccc <HAL_GPIO_Init+0x2b4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aea:	e02c      	b.n	8001b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e029      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	3304      	adds	r3, #4
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e024      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	3308      	adds	r3, #8
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e01f      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e01a      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e013      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	611a      	str	r2, [r3, #16]
          break;
 8001b32:	e009      	b.n	8001b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	615a      	str	r2, [r3, #20]
          break;
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          break;
 8001b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2bff      	cmp	r3, #255	; 0xff
 8001b4c:	d801      	bhi.n	8001b52 <HAL_GPIO_Init+0x13a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	e001      	b.n	8001b56 <HAL_GPIO_Init+0x13e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	d802      	bhi.n	8001b64 <HAL_GPIO_Init+0x14c>
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x152>
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	3b08      	subs	r3, #8
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	210f      	movs	r1, #15
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	6a39      	ldr	r1, [r7, #32]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80b1 	beq.w	8001cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <HAL_GPIO_Init+0x2c0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <HAL_GPIO_Init+0x1ec>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3f      	ldr	r2, [pc, #252]	; (8001cdc <HAL_GPIO_Init+0x2c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00d      	beq.n	8001c00 <HAL_GPIO_Init+0x1e8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3e      	ldr	r2, [pc, #248]	; (8001ce0 <HAL_GPIO_Init+0x2c8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <HAL_GPIO_Init+0x1e4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3d      	ldr	r2, [pc, #244]	; (8001ce4 <HAL_GPIO_Init+0x2cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_GPIO_Init+0x1e0>
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e004      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001c04:	2300      	movs	r3, #0
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	f002 0203 	and.w	r2, r2, #3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c16:	492f      	ldr	r1, [pc, #188]	; (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c30:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	492c      	ldr	r1, [pc, #176]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4928      	ldr	r1, [pc, #160]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	491e      	ldr	r1, [pc, #120]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4918      	ldr	r1, [pc, #96]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4914      	ldr	r1, [pc, #80]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d021      	beq.n	8001cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60cb      	str	r3, [r1, #12]
 8001cb4:	e021      	b.n	8001cfa <HAL_GPIO_Init+0x2e2>
 8001cb6:	bf00      	nop
 8001cb8:	10320000 	.word	0x10320000
 8001cbc:	10310000 	.word	0x10310000
 8001cc0:	10220000 	.word	0x10220000
 8001cc4:	10210000 	.word	0x10210000
 8001cc8:	10120000 	.word	0x10120000
 8001ccc:	10110000 	.word	0x10110000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40011400 	.word	0x40011400
 8001ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4909      	ldr	r1, [pc, #36]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f47f ae8e 	bne.w	8001a2c <HAL_GPIO_Init+0x14>
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	372c      	adds	r7, #44	; 0x2c
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d5e:	787b      	ldrb	r3, [r7, #1]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d64:	887a      	ldrh	r2, [r7, #2]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6a:	e003      	b.n	8001d74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	041a      	lsls	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e12b      	b.n	8001fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fbe6 	bl	8001578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de4:	f001 f918 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8001de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4a81      	ldr	r2, [pc, #516]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d807      	bhi.n	8001e04 <HAL_I2C_Init+0x84>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4a80      	ldr	r2, [pc, #512]	; (8001ff8 <HAL_I2C_Init+0x278>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	bf94      	ite	ls
 8001dfc:	2301      	movls	r3, #1
 8001dfe:	2300      	movhi	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e006      	b.n	8001e12 <HAL_I2C_Init+0x92>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4a7d      	ldr	r2, [pc, #500]	; (8001ffc <HAL_I2C_Init+0x27c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	bf94      	ite	ls
 8001e0c:	2301      	movls	r3, #1
 8001e0e:	2300      	movhi	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0e7      	b.n	8001fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4a78      	ldr	r2, [pc, #480]	; (8002000 <HAL_I2C_Init+0x280>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0c9b      	lsrs	r3, r3, #18
 8001e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d802      	bhi.n	8001e54 <HAL_I2C_Init+0xd4>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3301      	adds	r3, #1
 8001e52:	e009      	b.n	8001e68 <HAL_I2C_Init+0xe8>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_I2C_Init+0x284>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	3301      	adds	r3, #1
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	495c      	ldr	r1, [pc, #368]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d819      	bhi.n	8001ebc <HAL_I2C_Init+0x13c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e59      	subs	r1, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e96:	1c59      	adds	r1, r3, #1
 8001e98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_I2C_Init+0x138>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1e59      	subs	r1, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb6:	e051      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001eb8:	2304      	movs	r3, #4
 8001eba:	e04f      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d111      	bne.n	8001ee8 <HAL_I2C_Init+0x168>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1e58      	subs	r0, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	440b      	add	r3, r1
 8001ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e012      	b.n	8001f0e <HAL_I2C_Init+0x18e>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	0099      	lsls	r1, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Init+0x196>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e022      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10e      	bne.n	8001f3c <HAL_I2C_Init+0x1bc>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1e58      	subs	r0, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	440b      	add	r3, r1
 8001f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3a:	e00f      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1e58      	subs	r0, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	0099      	lsls	r1, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	6809      	ldr	r1, [r1, #0]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6911      	ldr	r1, [r2, #16]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68d2      	ldr	r2, [r2, #12]
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	000186a0 	.word	0x000186a0
 8001ff8:	001e847f 	.word	0x001e847f
 8001ffc:	003d08ff 	.word	0x003d08ff
 8002000:	431bde83 	.word	0x431bde83
 8002004:	10624dd3 	.word	0x10624dd3

08002008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	461a      	mov	r2, r3
 8002014:	460b      	mov	r3, r1
 8002016:	817b      	strh	r3, [r7, #10]
 8002018:	4613      	mov	r3, r2
 800201a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff fbea 	bl	80017f4 <HAL_GetTick>
 8002020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b20      	cmp	r3, #32
 800202c:	f040 80e0 	bne.w	80021f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2319      	movs	r3, #25
 8002036:	2201      	movs	r2, #1
 8002038:	4970      	ldr	r1, [pc, #448]	; (80021fc <HAL_I2C_Master_Transmit+0x1f4>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fa92 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002046:	2302      	movs	r3, #2
 8002048:	e0d3      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_I2C_Master_Transmit+0x50>
 8002054:	2302      	movs	r3, #2
 8002056:	e0cc      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d007      	beq.n	800207e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2221      	movs	r2, #33	; 0x21
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2210      	movs	r2, #16
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	893a      	ldrh	r2, [r7, #8]
 80020ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a50      	ldr	r2, [pc, #320]	; (8002200 <HAL_I2C_Master_Transmit+0x1f8>)
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020c0:	8979      	ldrh	r1, [r7, #10]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f9ca 	bl	8002460 <I2C_MasterRequestWrite>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e08d      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020ec:	e066      	b.n	80021bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	6a39      	ldr	r1, [r7, #32]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fb0c 	bl	8002710 <I2C_WaitOnTXEFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b04      	cmp	r3, #4
 8002104:	d107      	bne.n	8002116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06b      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b04      	cmp	r3, #4
 8002156:	d11b      	bne.n	8002190 <HAL_I2C_Master_Transmit+0x188>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	2b00      	cmp	r3, #0
 800215e:	d017      	beq.n	8002190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	6a39      	ldr	r1, [r7, #32]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fafc 	bl	8002792 <I2C_WaitOnBTFFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00d      	beq.n	80021bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d107      	bne.n	80021b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e01a      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d194      	bne.n	80020ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	00100002 	.word	0x00100002
 8002200:	ffff0000 	.word	0xffff0000

08002204 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	460b      	mov	r3, r1
 8002212:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff faee 	bl	80017f4 <HAL_GetTick>
 8002218:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b20      	cmp	r3, #32
 8002228:	f040 8111 	bne.w	800244e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2319      	movs	r3, #25
 8002232:	2201      	movs	r2, #1
 8002234:	4988      	ldr	r1, [pc, #544]	; (8002458 <HAL_I2C_IsDeviceReady+0x254>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f994 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	e104      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2C_IsDeviceReady+0x50>
 8002250:	2302      	movs	r3, #2
 8002252:	e0fd      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d007      	beq.n	800227a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002288:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2224      	movs	r2, #36	; 0x24
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a70      	ldr	r2, [pc, #448]	; (800245c <HAL_I2C_IsDeviceReady+0x258>)
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f952 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d4:	d103      	bne.n	80022de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0b6      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fa7f 	bl	80017f4 <HAL_GetTick>
 80022f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002326:	e025      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002328:	f7ff fa64 	bl	80017f4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d302      	bcc.n	800233e <HAL_I2C_IsDeviceReady+0x13a>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22a0      	movs	r2, #160	; 0xa0
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2ba0      	cmp	r3, #160	; 0xa0
 800237e:	d005      	beq.n	800238c <HAL_I2C_IsDeviceReady+0x188>
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <HAL_I2C_IsDeviceReady+0x188>
 8002386:	7dbb      	ldrb	r3, [r7, #22]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0cd      	beq.n	8002328 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d129      	bne.n	80023f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2319      	movs	r3, #25
 80023ce:	2201      	movs	r2, #1
 80023d0:	4921      	ldr	r1, [pc, #132]	; (8002458 <HAL_I2C_IsDeviceReady+0x254>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f8c6 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e036      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e02c      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002404:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800240e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	490f      	ldr	r1, [pc, #60]	; (8002458 <HAL_I2C_IsDeviceReady+0x254>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8a2 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e012      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	3301      	adds	r3, #1
 800242e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	f4ff af32 	bcc.w	800229e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	00100002 	.word	0x00100002
 800245c:	ffff0000 	.word	0xffff0000

08002460 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d006      	beq.n	800248a <I2C_MasterRequestWrite+0x2a>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d003      	beq.n	800248a <I2C_MasterRequestWrite+0x2a>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002488:	d108      	bne.n	800249c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e00b      	b.n	80024b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d107      	bne.n	80024b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f84f 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00d      	beq.n	80024e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024da:	d103      	bne.n	80024e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e035      	b.n	8002554 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024f0:	d108      	bne.n	8002504 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002500:	611a      	str	r2, [r3, #16]
 8002502:	e01b      	b.n	800253c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002504:	897b      	ldrh	r3, [r7, #10]
 8002506:	11db      	asrs	r3, r3, #7
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 0306 	and.w	r3, r3, #6
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f063 030f 	orn	r3, r3, #15
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	490e      	ldr	r1, [pc, #56]	; (800255c <I2C_MasterRequestWrite+0xfc>)
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f875 	bl	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e010      	b.n	8002554 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002532:	897b      	ldrh	r3, [r7, #10]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4907      	ldr	r1, [pc, #28]	; (8002560 <I2C_MasterRequestWrite+0x100>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f865 	bl	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	00010008 	.word	0x00010008
 8002560:	00010002 	.word	0x00010002

08002564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002574:	e025      	b.n	80025c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d021      	beq.n	80025c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257e:	f7ff f939 	bl	80017f4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d302      	bcc.n	8002594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d116      	bne.n	80025c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e023      	b.n	800260a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10d      	bne.n	80025e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4013      	ands	r3, r2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf0c      	ite	eq
 80025de:	2301      	moveq	r3, #1
 80025e0:	2300      	movne	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	e00c      	b.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4013      	ands	r3, r2
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	429a      	cmp	r2, r3
 8002606:	d0b6      	beq.n	8002576 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002620:	e051      	b.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002630:	d123      	bne.n	800267a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002640:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800264a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f043 0204 	orr.w	r2, r3, #4
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e046      	b.n	8002708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d021      	beq.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7ff f8b7 	bl	80017f4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d116      	bne.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0220 	orr.w	r2, r3, #32
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e020      	b.n	8002708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10c      	bne.n	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4013      	ands	r3, r2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	e00b      	b.n	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	43da      	mvns	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4013      	ands	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf14      	ite	ne
 80026fc:	2301      	movne	r3, #1
 80026fe:	2300      	moveq	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d18d      	bne.n	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800271c:	e02d      	b.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f878 	bl	8002814 <I2C_IsAcknowledgeFailed>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e02d      	b.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d021      	beq.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002736:	f7ff f85d 	bl	80017f4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	429a      	cmp	r2, r3
 8002744:	d302      	bcc.n	800274c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d116      	bne.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d1ca      	bne.n	800271e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800279e:	e02d      	b.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f837 	bl	8002814 <I2C_IsAcknowledgeFailed>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e02d      	b.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d021      	beq.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b8:	f7ff f81c 	bl	80017f4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d116      	bne.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e007      	b.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d1ca      	bne.n	80027a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d11b      	bne.n	8002864 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002834:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e272      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8087 	beq.w	800299e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002890:	4b92      	ldr	r3, [pc, #584]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b04      	cmp	r3, #4
 800289a:	d00c      	beq.n	80028b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800289c:	4b8f      	ldr	r3, [pc, #572]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d112      	bne.n	80028ce <HAL_RCC_OscConfig+0x5e>
 80028a8:	4b8c      	ldr	r3, [pc, #560]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d10b      	bne.n	80028ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b6:	4b89      	ldr	r3, [pc, #548]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d06c      	beq.n	800299c <HAL_RCC_OscConfig+0x12c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d168      	bne.n	800299c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e24c      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x76>
 80028d8:	4b80      	ldr	r3, [pc, #512]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a7f      	ldr	r2, [pc, #508]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80028de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	e02e      	b.n	8002944 <HAL_RCC_OscConfig+0xd4>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10c      	bne.n	8002908 <HAL_RCC_OscConfig+0x98>
 80028ee:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a7a      	ldr	r2, [pc, #488]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	4b78      	ldr	r3, [pc, #480]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a77      	ldr	r2, [pc, #476]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0xd4>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0xbc>
 8002912:	4b72      	ldr	r3, [pc, #456]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a71      	ldr	r2, [pc, #452]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xd4>
 800292c:	4b6b      	ldr	r3, [pc, #428]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a6a      	ldr	r2, [pc, #424]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b68      	ldr	r3, [pc, #416]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a67      	ldr	r2, [pc, #412]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe ff52 	bl	80017f4 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002954:	f7fe ff4e 	bl	80017f4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e200      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b5d      	ldr	r3, [pc, #372]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xe4>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe ff3e 	bl	80017f4 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe ff3a 	bl	80017f4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1ec      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	4b53      	ldr	r3, [pc, #332]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x10c>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d063      	beq.n	8002a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029aa:	4b4c      	ldr	r3, [pc, #304]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029b6:	4b49      	ldr	r3, [pc, #292]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d11c      	bne.n	80029fc <HAL_RCC_OscConfig+0x18c>
 80029c2:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d116      	bne.n	80029fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_RCC_OscConfig+0x176>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e1c0      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4939      	ldr	r1, [pc, #228]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	e03a      	b.n	8002a72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <HAL_RCC_OscConfig+0x270>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fef3 	bl	80017f4 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe feef 	bl	80017f4 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1a1      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4927      	ldr	r1, [pc, #156]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <HAL_RCC_OscConfig+0x270>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fed2 	bl	80017f4 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a54:	f7fe fece 	bl	80017f4 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e180      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d03a      	beq.n	8002af4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d019      	beq.n	8002aba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <HAL_RCC_OscConfig+0x274>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe feb2 	bl	80017f4 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fe feae 	bl	80017f4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e160      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f000 fac4 	bl	8003040 <RCC_Delay>
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_RCC_OscConfig+0x274>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fe98 	bl	80017f4 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac6:	e00f      	b.n	8002ae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fe94 	bl	80017f4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d908      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e146      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	42420000 	.word	0x42420000
 8002ae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae8:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e9      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a6 	beq.w	8002c4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b06:	4b8b      	ldr	r3, [pc, #556]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10d      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4b88      	ldr	r3, [pc, #544]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4a87      	ldr	r2, [pc, #540]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	61d3      	str	r3, [r2, #28]
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_OscConfig+0x4c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b7f      	ldr	r3, [pc, #508]	; (8002d38 <HAL_RCC_OscConfig+0x4c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a7e      	ldr	r2, [pc, #504]	; (8002d38 <HAL_RCC_OscConfig+0x4c8>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7fe fe55 	bl	80017f4 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7fe fe51 	bl	80017f4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	; 0x64
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e103      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x4c8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x312>
 8002b74:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a6e      	ldr	r2, [pc, #440]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	e02d      	b.n	8002bde <HAL_RCC_OscConfig+0x36e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x334>
 8002b8a:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	4a66      	ldr	r2, [pc, #408]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6213      	str	r3, [r2, #32]
 8002ba2:	e01c      	b.n	8002bde <HAL_RCC_OscConfig+0x36e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x356>
 8002bac:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a60      	ldr	r2, [pc, #384]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	4b5e      	ldr	r3, [pc, #376]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a5d      	ldr	r2, [pc, #372]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6213      	str	r3, [r2, #32]
 8002bc4:	e00b      	b.n	8002bde <HAL_RCC_OscConfig+0x36e>
 8002bc6:	4b5b      	ldr	r3, [pc, #364]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a5a      	ldr	r2, [pc, #360]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d015      	beq.n	8002c12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fe05 	bl	80017f4 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe fe01 	bl	80017f4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e0b1      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ee      	beq.n	8002bee <HAL_RCC_OscConfig+0x37e>
 8002c10:	e014      	b.n	8002c3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fdef 	bl	80017f4 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe fdeb 	bl	80017f4 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e09b      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c30:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ee      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d105      	bne.n	8002c4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	4a3b      	ldr	r2, [pc, #236]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8087 	beq.w	8002d66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d061      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d146      	bne.n	8002cfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6c:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fdbf 	bl	80017f4 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fe fdbb 	bl	80017f4 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e06d      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca0:	d108      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ca2:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4921      	ldr	r1, [pc, #132]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a19      	ldr	r1, [r3, #32]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	491b      	ldr	r1, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fd8f 	bl	80017f4 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cda:	f7fe fd8b 	bl	80017f4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e03d      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x46a>
 8002cf8:	e035      	b.n	8002d66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe fd78 	bl	80017f4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fd74 	bl	80017f4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e026      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x498>
 8002d26:	e01e      	b.n	8002d66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e019      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x500>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0d0      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	4965      	ldr	r1, [pc, #404]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b8      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	494d      	ldr	r1, [pc, #308]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d040      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d115      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e073      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e42:	4b3d      	ldr	r3, [pc, #244]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06b      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4936      	ldr	r1, [pc, #216]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e64:	f7fe fcc6 	bl	80017f4 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fe fcc2 	bl	80017f4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e053      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 020c 	and.w	r2, r3, #12
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1eb      	bne.n	8002e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d210      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 0207 	bic.w	r2, r3, #7
 8002eaa:	4922      	ldr	r1, [pc, #136]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e032      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4916      	ldr	r1, [pc, #88]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	490e      	ldr	r1, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f02:	f000 f821 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	490a      	ldr	r1, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1cc>)
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1d0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fc24 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08004d0c 	.word	0x08004d0c
 8002f40:	20000008 	.word	0x20000008
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b490      	push	{r4, r7}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f4e:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f50:	1d3c      	adds	r4, r7, #4
 8002f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f58:	f240 2301 	movw	r3, #513	; 0x201
 8002f5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x40>
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x46>
 8002f86:	e02b      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f8a:	623b      	str	r3, [r7, #32]
      break;
 8002f8c:	e02b      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	0c9b      	lsrs	r3, r3, #18
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3328      	adds	r3, #40	; 0x28
 8002f98:	443b      	add	r3, r7
 8002f9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	0c5b      	lsrs	r3, r3, #17
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	3328      	adds	r3, #40	; 0x28
 8002fb6:	443b      	add	r3, r7
 8002fb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fc2:	fb03 f202 	mul.w	r2, r3, r2
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	e004      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	623b      	str	r3, [r7, #32]
      break;
 8002fde:	e002      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fe2:	623b      	str	r3, [r7, #32]
      break;
 8002fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3728      	adds	r7, #40	; 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc90      	pop	{r4, r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	08003fa0 	.word	0x08003fa0
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	007a1200 	.word	0x007a1200
 8003000:	003d0900 	.word	0x003d0900

08003004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003008:	4b02      	ldr	r3, [pc, #8]	; (8003014 <HAL_RCC_GetHCLKFreq+0x10>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	20000008 	.word	0x20000008

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800301c:	f7ff fff2 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	08004d1c 	.word	0x08004d1c

08003040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <RCC_Delay+0x34>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <RCC_Delay+0x38>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a5b      	lsrs	r3, r3, #9
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800305c:	bf00      	nop
  }
  while (Delay --);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e5a      	subs	r2, r3, #1
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f9      	bne.n	800305c <RCC_Delay+0x1c>
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	20000008 	.word	0x20000008
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e041      	b.n	8003112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe faa6 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f000 f93c 	bl	8003338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e032      	b.n	800319a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_TIM_Base_Start+0x88>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_TIM_Base_Start+0x48>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d009      	beq.n	8003164 <HAL_TIM_Base_Start+0x48>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_TIM_Base_Start+0x8c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_Base_Start+0x48>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a13      	ldr	r2, [pc, #76]	; (80031ac <HAL_TIM_Base_Start+0x90>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d111      	bne.n	8003188 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d010      	beq.n	8003198 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	e007      	b.n	8003198 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800

080031b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_ConfigClockSource+0x18>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e0b3      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x180>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003200:	d03e      	beq.n	8003280 <HAL_TIM_ConfigClockSource+0xd0>
 8003202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003206:	f200 8087 	bhi.w	8003318 <HAL_TIM_ConfigClockSource+0x168>
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	f000 8085 	beq.w	800331c <HAL_TIM_ConfigClockSource+0x16c>
 8003212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003216:	d87f      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x168>
 8003218:	2b70      	cmp	r3, #112	; 0x70
 800321a:	d01a      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0xa2>
 800321c:	2b70      	cmp	r3, #112	; 0x70
 800321e:	d87b      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x168>
 8003220:	2b60      	cmp	r3, #96	; 0x60
 8003222:	d050      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x116>
 8003224:	2b60      	cmp	r3, #96	; 0x60
 8003226:	d877      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x168>
 8003228:	2b50      	cmp	r3, #80	; 0x50
 800322a:	d03c      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0xf6>
 800322c:	2b50      	cmp	r3, #80	; 0x50
 800322e:	d873      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x168>
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d058      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x136>
 8003234:	2b40      	cmp	r3, #64	; 0x40
 8003236:	d86f      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x168>
 8003238:	2b30      	cmp	r3, #48	; 0x30
 800323a:	d064      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x156>
 800323c:	2b30      	cmp	r3, #48	; 0x30
 800323e:	d86b      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x168>
 8003240:	2b20      	cmp	r3, #32
 8003242:	d060      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x156>
 8003244:	2b20      	cmp	r3, #32
 8003246:	d867      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x168>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d05c      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x156>
 800324c:	2b10      	cmp	r3, #16
 800324e:	d05a      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003250:	e062      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f000 f942 	bl	80034ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003274:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	609a      	str	r2, [r3, #8]
      break;
 800327e:	e04e      	b.n	800331e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6899      	ldr	r1, [r3, #8]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f000 f92b 	bl	80034ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a2:	609a      	str	r2, [r3, #8]
      break;
 80032a4:	e03b      	b.n	800331e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f000 f8a2 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2150      	movs	r1, #80	; 0x50
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f8f9 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032c4:	e02b      	b.n	800331e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f000 f8c0 	bl	8003458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2160      	movs	r1, #96	; 0x60
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f8e9 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032e4:	e01b      	b.n	800331e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 f882 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2140      	movs	r1, #64	; 0x40
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f8d9 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8003304:	e00b      	b.n	800331e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f000 f8d0 	bl	80034b6 <TIM_ITRx_SetConfig>
        break;
 8003316:	e002      	b.n	800331e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800331c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <TIM_Base_SetConfig+0xb8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003356:	d007      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <TIM_Base_SetConfig+0xbc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <TIM_Base_SetConfig+0xc0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d108      	bne.n	800337a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <TIM_Base_SetConfig+0xb8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <TIM_Base_SetConfig+0xbc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <TIM_Base_SetConfig+0xc0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <TIM_Base_SetConfig+0xb8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f023 0210 	bic.w	r2, r3, #16
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 0307 	orr.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800353c:	2302      	movs	r3, #2
 800353e:	e046      	b.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d009      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10c      	bne.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800

080035e4 <__errno>:
 80035e4:	4b01      	ldr	r3, [pc, #4]	; (80035ec <__errno+0x8>)
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000014 	.word	0x20000014

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	2600      	movs	r6, #0
 80035f4:	4d0c      	ldr	r5, [pc, #48]	; (8003628 <__libc_init_array+0x38>)
 80035f6:	4c0d      	ldr	r4, [pc, #52]	; (800362c <__libc_init_array+0x3c>)
 80035f8:	1b64      	subs	r4, r4, r5
 80035fa:	10a4      	asrs	r4, r4, #2
 80035fc:	42a6      	cmp	r6, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	f000 fc9c 	bl	8003f3c <_init>
 8003604:	2600      	movs	r6, #0
 8003606:	4d0a      	ldr	r5, [pc, #40]	; (8003630 <__libc_init_array+0x40>)
 8003608:	4c0a      	ldr	r4, [pc, #40]	; (8003634 <__libc_init_array+0x44>)
 800360a:	1b64      	subs	r4, r4, r5
 800360c:	10a4      	asrs	r4, r4, #2
 800360e:	42a6      	cmp	r6, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f855 3b04 	ldr.w	r3, [r5], #4
 8003618:	4798      	blx	r3
 800361a:	3601      	adds	r6, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003622:	4798      	blx	r3
 8003624:	3601      	adds	r6, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	08004d58 	.word	0x08004d58
 800362c:	08004d58 	.word	0x08004d58
 8003630:	08004d58 	.word	0x08004d58
 8003634:	08004d5c 	.word	0x08004d5c

08003638 <memset>:
 8003638:	4603      	mov	r3, r0
 800363a:	4402      	add	r2, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <memset+0xa>
 8003640:	4770      	bx	lr
 8003642:	f803 1b01 	strb.w	r1, [r3], #1
 8003646:	e7f9      	b.n	800363c <memset+0x4>

08003648 <siprintf>:
 8003648:	b40e      	push	{r1, r2, r3}
 800364a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800364e:	b500      	push	{lr}
 8003650:	b09c      	sub	sp, #112	; 0x70
 8003652:	ab1d      	add	r3, sp, #116	; 0x74
 8003654:	9002      	str	r0, [sp, #8]
 8003656:	9006      	str	r0, [sp, #24]
 8003658:	9107      	str	r1, [sp, #28]
 800365a:	9104      	str	r1, [sp, #16]
 800365c:	4808      	ldr	r0, [pc, #32]	; (8003680 <siprintf+0x38>)
 800365e:	4909      	ldr	r1, [pc, #36]	; (8003684 <siprintf+0x3c>)
 8003660:	f853 2b04 	ldr.w	r2, [r3], #4
 8003664:	9105      	str	r1, [sp, #20]
 8003666:	6800      	ldr	r0, [r0, #0]
 8003668:	a902      	add	r1, sp, #8
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	f000 f868 	bl	8003740 <_svfiprintf_r>
 8003670:	2200      	movs	r2, #0
 8003672:	9b02      	ldr	r3, [sp, #8]
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	b01c      	add	sp, #112	; 0x70
 8003678:	f85d eb04 	ldr.w	lr, [sp], #4
 800367c:	b003      	add	sp, #12
 800367e:	4770      	bx	lr
 8003680:	20000014 	.word	0x20000014
 8003684:	ffff0208 	.word	0xffff0208

08003688 <__ssputs_r>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	688e      	ldr	r6, [r1, #8]
 800368e:	4682      	mov	sl, r0
 8003690:	429e      	cmp	r6, r3
 8003692:	460c      	mov	r4, r1
 8003694:	4690      	mov	r8, r2
 8003696:	461f      	mov	r7, r3
 8003698:	d838      	bhi.n	800370c <__ssputs_r+0x84>
 800369a:	898a      	ldrh	r2, [r1, #12]
 800369c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036a0:	d032      	beq.n	8003708 <__ssputs_r+0x80>
 80036a2:	6825      	ldr	r5, [r4, #0]
 80036a4:	6909      	ldr	r1, [r1, #16]
 80036a6:	3301      	adds	r3, #1
 80036a8:	eba5 0901 	sub.w	r9, r5, r1
 80036ac:	6965      	ldr	r5, [r4, #20]
 80036ae:	444b      	add	r3, r9
 80036b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036b8:	106d      	asrs	r5, r5, #1
 80036ba:	429d      	cmp	r5, r3
 80036bc:	bf38      	it	cc
 80036be:	461d      	movcc	r5, r3
 80036c0:	0553      	lsls	r3, r2, #21
 80036c2:	d531      	bpl.n	8003728 <__ssputs_r+0xa0>
 80036c4:	4629      	mov	r1, r5
 80036c6:	f000 fb6f 	bl	8003da8 <_malloc_r>
 80036ca:	4606      	mov	r6, r0
 80036cc:	b950      	cbnz	r0, 80036e4 <__ssputs_r+0x5c>
 80036ce:	230c      	movs	r3, #12
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	f8ca 3000 	str.w	r3, [sl]
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e4:	464a      	mov	r2, r9
 80036e6:	6921      	ldr	r1, [r4, #16]
 80036e8:	f000 face 	bl	8003c88 <memcpy>
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	6126      	str	r6, [r4, #16]
 80036fa:	444e      	add	r6, r9
 80036fc:	6026      	str	r6, [r4, #0]
 80036fe:	463e      	mov	r6, r7
 8003700:	6165      	str	r5, [r4, #20]
 8003702:	eba5 0509 	sub.w	r5, r5, r9
 8003706:	60a5      	str	r5, [r4, #8]
 8003708:	42be      	cmp	r6, r7
 800370a:	d900      	bls.n	800370e <__ssputs_r+0x86>
 800370c:	463e      	mov	r6, r7
 800370e:	4632      	mov	r2, r6
 8003710:	4641      	mov	r1, r8
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	f000 fac6 	bl	8003ca4 <memmove>
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	2000      	movs	r0, #0
 800371c:	1b9b      	subs	r3, r3, r6
 800371e:	60a3      	str	r3, [r4, #8]
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	4433      	add	r3, r6
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	e7db      	b.n	80036e0 <__ssputs_r+0x58>
 8003728:	462a      	mov	r2, r5
 800372a:	f000 fbb1 	bl	8003e90 <_realloc_r>
 800372e:	4606      	mov	r6, r0
 8003730:	2800      	cmp	r0, #0
 8003732:	d1e1      	bne.n	80036f8 <__ssputs_r+0x70>
 8003734:	4650      	mov	r0, sl
 8003736:	6921      	ldr	r1, [r4, #16]
 8003738:	f000 face 	bl	8003cd8 <_free_r>
 800373c:	e7c7      	b.n	80036ce <__ssputs_r+0x46>
	...

08003740 <_svfiprintf_r>:
 8003740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003744:	4698      	mov	r8, r3
 8003746:	898b      	ldrh	r3, [r1, #12]
 8003748:	4607      	mov	r7, r0
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	460d      	mov	r5, r1
 800374e:	4614      	mov	r4, r2
 8003750:	b09d      	sub	sp, #116	; 0x74
 8003752:	d50e      	bpl.n	8003772 <_svfiprintf_r+0x32>
 8003754:	690b      	ldr	r3, [r1, #16]
 8003756:	b963      	cbnz	r3, 8003772 <_svfiprintf_r+0x32>
 8003758:	2140      	movs	r1, #64	; 0x40
 800375a:	f000 fb25 	bl	8003da8 <_malloc_r>
 800375e:	6028      	str	r0, [r5, #0]
 8003760:	6128      	str	r0, [r5, #16]
 8003762:	b920      	cbnz	r0, 800376e <_svfiprintf_r+0x2e>
 8003764:	230c      	movs	r3, #12
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	e0d1      	b.n	8003912 <_svfiprintf_r+0x1d2>
 800376e:	2340      	movs	r3, #64	; 0x40
 8003770:	616b      	str	r3, [r5, #20]
 8003772:	2300      	movs	r3, #0
 8003774:	9309      	str	r3, [sp, #36]	; 0x24
 8003776:	2320      	movs	r3, #32
 8003778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800377c:	2330      	movs	r3, #48	; 0x30
 800377e:	f04f 0901 	mov.w	r9, #1
 8003782:	f8cd 800c 	str.w	r8, [sp, #12]
 8003786:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800392c <_svfiprintf_r+0x1ec>
 800378a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800378e:	4623      	mov	r3, r4
 8003790:	469a      	mov	sl, r3
 8003792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003796:	b10a      	cbz	r2, 800379c <_svfiprintf_r+0x5c>
 8003798:	2a25      	cmp	r2, #37	; 0x25
 800379a:	d1f9      	bne.n	8003790 <_svfiprintf_r+0x50>
 800379c:	ebba 0b04 	subs.w	fp, sl, r4
 80037a0:	d00b      	beq.n	80037ba <_svfiprintf_r+0x7a>
 80037a2:	465b      	mov	r3, fp
 80037a4:	4622      	mov	r2, r4
 80037a6:	4629      	mov	r1, r5
 80037a8:	4638      	mov	r0, r7
 80037aa:	f7ff ff6d 	bl	8003688 <__ssputs_r>
 80037ae:	3001      	adds	r0, #1
 80037b0:	f000 80aa 	beq.w	8003908 <_svfiprintf_r+0x1c8>
 80037b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037b6:	445a      	add	r2, fp
 80037b8:	9209      	str	r2, [sp, #36]	; 0x24
 80037ba:	f89a 3000 	ldrb.w	r3, [sl]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80a2 	beq.w	8003908 <_svfiprintf_r+0x1c8>
 80037c4:	2300      	movs	r3, #0
 80037c6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ce:	f10a 0a01 	add.w	sl, sl, #1
 80037d2:	9304      	str	r3, [sp, #16]
 80037d4:	9307      	str	r3, [sp, #28]
 80037d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037da:	931a      	str	r3, [sp, #104]	; 0x68
 80037dc:	4654      	mov	r4, sl
 80037de:	2205      	movs	r2, #5
 80037e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e4:	4851      	ldr	r0, [pc, #324]	; (800392c <_svfiprintf_r+0x1ec>)
 80037e6:	f000 fa41 	bl	8003c6c <memchr>
 80037ea:	9a04      	ldr	r2, [sp, #16]
 80037ec:	b9d8      	cbnz	r0, 8003826 <_svfiprintf_r+0xe6>
 80037ee:	06d0      	lsls	r0, r2, #27
 80037f0:	bf44      	itt	mi
 80037f2:	2320      	movmi	r3, #32
 80037f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f8:	0711      	lsls	r1, r2, #28
 80037fa:	bf44      	itt	mi
 80037fc:	232b      	movmi	r3, #43	; 0x2b
 80037fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003802:	f89a 3000 	ldrb.w	r3, [sl]
 8003806:	2b2a      	cmp	r3, #42	; 0x2a
 8003808:	d015      	beq.n	8003836 <_svfiprintf_r+0xf6>
 800380a:	4654      	mov	r4, sl
 800380c:	2000      	movs	r0, #0
 800380e:	f04f 0c0a 	mov.w	ip, #10
 8003812:	9a07      	ldr	r2, [sp, #28]
 8003814:	4621      	mov	r1, r4
 8003816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800381a:	3b30      	subs	r3, #48	; 0x30
 800381c:	2b09      	cmp	r3, #9
 800381e:	d94e      	bls.n	80038be <_svfiprintf_r+0x17e>
 8003820:	b1b0      	cbz	r0, 8003850 <_svfiprintf_r+0x110>
 8003822:	9207      	str	r2, [sp, #28]
 8003824:	e014      	b.n	8003850 <_svfiprintf_r+0x110>
 8003826:	eba0 0308 	sub.w	r3, r0, r8
 800382a:	fa09 f303 	lsl.w	r3, r9, r3
 800382e:	4313      	orrs	r3, r2
 8003830:	46a2      	mov	sl, r4
 8003832:	9304      	str	r3, [sp, #16]
 8003834:	e7d2      	b.n	80037dc <_svfiprintf_r+0x9c>
 8003836:	9b03      	ldr	r3, [sp, #12]
 8003838:	1d19      	adds	r1, r3, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	9103      	str	r1, [sp, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	bfbb      	ittet	lt
 8003842:	425b      	neglt	r3, r3
 8003844:	f042 0202 	orrlt.w	r2, r2, #2
 8003848:	9307      	strge	r3, [sp, #28]
 800384a:	9307      	strlt	r3, [sp, #28]
 800384c:	bfb8      	it	lt
 800384e:	9204      	strlt	r2, [sp, #16]
 8003850:	7823      	ldrb	r3, [r4, #0]
 8003852:	2b2e      	cmp	r3, #46	; 0x2e
 8003854:	d10c      	bne.n	8003870 <_svfiprintf_r+0x130>
 8003856:	7863      	ldrb	r3, [r4, #1]
 8003858:	2b2a      	cmp	r3, #42	; 0x2a
 800385a:	d135      	bne.n	80038c8 <_svfiprintf_r+0x188>
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	3402      	adds	r4, #2
 8003860:	1d1a      	adds	r2, r3, #4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	9203      	str	r2, [sp, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	bfb8      	it	lt
 800386a:	f04f 33ff 	movlt.w	r3, #4294967295
 800386e:	9305      	str	r3, [sp, #20]
 8003870:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003930 <_svfiprintf_r+0x1f0>
 8003874:	2203      	movs	r2, #3
 8003876:	4650      	mov	r0, sl
 8003878:	7821      	ldrb	r1, [r4, #0]
 800387a:	f000 f9f7 	bl	8003c6c <memchr>
 800387e:	b140      	cbz	r0, 8003892 <_svfiprintf_r+0x152>
 8003880:	2340      	movs	r3, #64	; 0x40
 8003882:	eba0 000a 	sub.w	r0, r0, sl
 8003886:	fa03 f000 	lsl.w	r0, r3, r0
 800388a:	9b04      	ldr	r3, [sp, #16]
 800388c:	3401      	adds	r4, #1
 800388e:	4303      	orrs	r3, r0
 8003890:	9304      	str	r3, [sp, #16]
 8003892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003896:	2206      	movs	r2, #6
 8003898:	4826      	ldr	r0, [pc, #152]	; (8003934 <_svfiprintf_r+0x1f4>)
 800389a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800389e:	f000 f9e5 	bl	8003c6c <memchr>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d038      	beq.n	8003918 <_svfiprintf_r+0x1d8>
 80038a6:	4b24      	ldr	r3, [pc, #144]	; (8003938 <_svfiprintf_r+0x1f8>)
 80038a8:	bb1b      	cbnz	r3, 80038f2 <_svfiprintf_r+0x1b2>
 80038aa:	9b03      	ldr	r3, [sp, #12]
 80038ac:	3307      	adds	r3, #7
 80038ae:	f023 0307 	bic.w	r3, r3, #7
 80038b2:	3308      	adds	r3, #8
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b8:	4433      	add	r3, r6
 80038ba:	9309      	str	r3, [sp, #36]	; 0x24
 80038bc:	e767      	b.n	800378e <_svfiprintf_r+0x4e>
 80038be:	460c      	mov	r4, r1
 80038c0:	2001      	movs	r0, #1
 80038c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80038c6:	e7a5      	b.n	8003814 <_svfiprintf_r+0xd4>
 80038c8:	2300      	movs	r3, #0
 80038ca:	f04f 0c0a 	mov.w	ip, #10
 80038ce:	4619      	mov	r1, r3
 80038d0:	3401      	adds	r4, #1
 80038d2:	9305      	str	r3, [sp, #20]
 80038d4:	4620      	mov	r0, r4
 80038d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038da:	3a30      	subs	r2, #48	; 0x30
 80038dc:	2a09      	cmp	r2, #9
 80038de:	d903      	bls.n	80038e8 <_svfiprintf_r+0x1a8>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0c5      	beq.n	8003870 <_svfiprintf_r+0x130>
 80038e4:	9105      	str	r1, [sp, #20]
 80038e6:	e7c3      	b.n	8003870 <_svfiprintf_r+0x130>
 80038e8:	4604      	mov	r4, r0
 80038ea:	2301      	movs	r3, #1
 80038ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80038f0:	e7f0      	b.n	80038d4 <_svfiprintf_r+0x194>
 80038f2:	ab03      	add	r3, sp, #12
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	462a      	mov	r2, r5
 80038f8:	4638      	mov	r0, r7
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <_svfiprintf_r+0x1fc>)
 80038fc:	a904      	add	r1, sp, #16
 80038fe:	f3af 8000 	nop.w
 8003902:	1c42      	adds	r2, r0, #1
 8003904:	4606      	mov	r6, r0
 8003906:	d1d6      	bne.n	80038b6 <_svfiprintf_r+0x176>
 8003908:	89ab      	ldrh	r3, [r5, #12]
 800390a:	065b      	lsls	r3, r3, #25
 800390c:	f53f af2c 	bmi.w	8003768 <_svfiprintf_r+0x28>
 8003910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003912:	b01d      	add	sp, #116	; 0x74
 8003914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003918:	ab03      	add	r3, sp, #12
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	462a      	mov	r2, r5
 800391e:	4638      	mov	r0, r7
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <_svfiprintf_r+0x1fc>)
 8003922:	a904      	add	r1, sp, #16
 8003924:	f000 f87c 	bl	8003a20 <_printf_i>
 8003928:	e7eb      	b.n	8003902 <_svfiprintf_r+0x1c2>
 800392a:	bf00      	nop
 800392c:	08004d24 	.word	0x08004d24
 8003930:	08004d2a 	.word	0x08004d2a
 8003934:	08004d2e 	.word	0x08004d2e
 8003938:	00000000 	.word	0x00000000
 800393c:	08003689 	.word	0x08003689

08003940 <_printf_common>:
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	4616      	mov	r6, r2
 8003946:	4699      	mov	r9, r3
 8003948:	688a      	ldr	r2, [r1, #8]
 800394a:	690b      	ldr	r3, [r1, #16]
 800394c:	4607      	mov	r7, r0
 800394e:	4293      	cmp	r3, r2
 8003950:	bfb8      	it	lt
 8003952:	4613      	movlt	r3, r2
 8003954:	6033      	str	r3, [r6, #0]
 8003956:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800395a:	460c      	mov	r4, r1
 800395c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003960:	b10a      	cbz	r2, 8003966 <_printf_common+0x26>
 8003962:	3301      	adds	r3, #1
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	0699      	lsls	r1, r3, #26
 800396a:	bf42      	ittt	mi
 800396c:	6833      	ldrmi	r3, [r6, #0]
 800396e:	3302      	addmi	r3, #2
 8003970:	6033      	strmi	r3, [r6, #0]
 8003972:	6825      	ldr	r5, [r4, #0]
 8003974:	f015 0506 	ands.w	r5, r5, #6
 8003978:	d106      	bne.n	8003988 <_printf_common+0x48>
 800397a:	f104 0a19 	add.w	sl, r4, #25
 800397e:	68e3      	ldr	r3, [r4, #12]
 8003980:	6832      	ldr	r2, [r6, #0]
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	42ab      	cmp	r3, r5
 8003986:	dc28      	bgt.n	80039da <_printf_common+0x9a>
 8003988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800398c:	1e13      	subs	r3, r2, #0
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	bf18      	it	ne
 8003992:	2301      	movne	r3, #1
 8003994:	0692      	lsls	r2, r2, #26
 8003996:	d42d      	bmi.n	80039f4 <_printf_common+0xb4>
 8003998:	4649      	mov	r1, r9
 800399a:	4638      	mov	r0, r7
 800399c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039a0:	47c0      	blx	r8
 80039a2:	3001      	adds	r0, #1
 80039a4:	d020      	beq.n	80039e8 <_printf_common+0xa8>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	68e5      	ldr	r5, [r4, #12]
 80039aa:	f003 0306 	and.w	r3, r3, #6
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	bf18      	it	ne
 80039b2:	2500      	movne	r5, #0
 80039b4:	6832      	ldr	r2, [r6, #0]
 80039b6:	f04f 0600 	mov.w	r6, #0
 80039ba:	68a3      	ldr	r3, [r4, #8]
 80039bc:	bf08      	it	eq
 80039be:	1aad      	subeq	r5, r5, r2
 80039c0:	6922      	ldr	r2, [r4, #16]
 80039c2:	bf08      	it	eq
 80039c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039c8:	4293      	cmp	r3, r2
 80039ca:	bfc4      	itt	gt
 80039cc:	1a9b      	subgt	r3, r3, r2
 80039ce:	18ed      	addgt	r5, r5, r3
 80039d0:	341a      	adds	r4, #26
 80039d2:	42b5      	cmp	r5, r6
 80039d4:	d11a      	bne.n	8003a0c <_printf_common+0xcc>
 80039d6:	2000      	movs	r0, #0
 80039d8:	e008      	b.n	80039ec <_printf_common+0xac>
 80039da:	2301      	movs	r3, #1
 80039dc:	4652      	mov	r2, sl
 80039de:	4649      	mov	r1, r9
 80039e0:	4638      	mov	r0, r7
 80039e2:	47c0      	blx	r8
 80039e4:	3001      	adds	r0, #1
 80039e6:	d103      	bne.n	80039f0 <_printf_common+0xb0>
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f0:	3501      	adds	r5, #1
 80039f2:	e7c4      	b.n	800397e <_printf_common+0x3e>
 80039f4:	2030      	movs	r0, #48	; 0x30
 80039f6:	18e1      	adds	r1, r4, r3
 80039f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a02:	4422      	add	r2, r4
 8003a04:	3302      	adds	r3, #2
 8003a06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a0a:	e7c5      	b.n	8003998 <_printf_common+0x58>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4622      	mov	r2, r4
 8003a10:	4649      	mov	r1, r9
 8003a12:	4638      	mov	r0, r7
 8003a14:	47c0      	blx	r8
 8003a16:	3001      	adds	r0, #1
 8003a18:	d0e6      	beq.n	80039e8 <_printf_common+0xa8>
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	e7d9      	b.n	80039d2 <_printf_common+0x92>
	...

08003a20 <_printf_i>:
 8003a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	7e0f      	ldrb	r7, [r1, #24]
 8003a26:	4691      	mov	r9, r2
 8003a28:	2f78      	cmp	r7, #120	; 0x78
 8003a2a:	4680      	mov	r8, r0
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	469a      	mov	sl, r3
 8003a30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a36:	d807      	bhi.n	8003a48 <_printf_i+0x28>
 8003a38:	2f62      	cmp	r7, #98	; 0x62
 8003a3a:	d80a      	bhi.n	8003a52 <_printf_i+0x32>
 8003a3c:	2f00      	cmp	r7, #0
 8003a3e:	f000 80d9 	beq.w	8003bf4 <_printf_i+0x1d4>
 8003a42:	2f58      	cmp	r7, #88	; 0x58
 8003a44:	f000 80a4 	beq.w	8003b90 <_printf_i+0x170>
 8003a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a50:	e03a      	b.n	8003ac8 <_printf_i+0xa8>
 8003a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a56:	2b15      	cmp	r3, #21
 8003a58:	d8f6      	bhi.n	8003a48 <_printf_i+0x28>
 8003a5a:	a101      	add	r1, pc, #4	; (adr r1, 8003a60 <_printf_i+0x40>)
 8003a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a60:	08003ab9 	.word	0x08003ab9
 8003a64:	08003acd 	.word	0x08003acd
 8003a68:	08003a49 	.word	0x08003a49
 8003a6c:	08003a49 	.word	0x08003a49
 8003a70:	08003a49 	.word	0x08003a49
 8003a74:	08003a49 	.word	0x08003a49
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003a49 	.word	0x08003a49
 8003a80:	08003a49 	.word	0x08003a49
 8003a84:	08003a49 	.word	0x08003a49
 8003a88:	08003a49 	.word	0x08003a49
 8003a8c:	08003bdb 	.word	0x08003bdb
 8003a90:	08003afd 	.word	0x08003afd
 8003a94:	08003bbd 	.word	0x08003bbd
 8003a98:	08003a49 	.word	0x08003a49
 8003a9c:	08003a49 	.word	0x08003a49
 8003aa0:	08003bfd 	.word	0x08003bfd
 8003aa4:	08003a49 	.word	0x08003a49
 8003aa8:	08003afd 	.word	0x08003afd
 8003aac:	08003a49 	.word	0x08003a49
 8003ab0:	08003a49 	.word	0x08003a49
 8003ab4:	08003bc5 	.word	0x08003bc5
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	1d1a      	adds	r2, r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	602a      	str	r2, [r5, #0]
 8003ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0a4      	b.n	8003c16 <_printf_i+0x1f6>
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	6829      	ldr	r1, [r5, #0]
 8003ad0:	0606      	lsls	r6, r0, #24
 8003ad2:	f101 0304 	add.w	r3, r1, #4
 8003ad6:	d50a      	bpl.n	8003aee <_printf_i+0xce>
 8003ad8:	680e      	ldr	r6, [r1, #0]
 8003ada:	602b      	str	r3, [r5, #0]
 8003adc:	2e00      	cmp	r6, #0
 8003ade:	da03      	bge.n	8003ae8 <_printf_i+0xc8>
 8003ae0:	232d      	movs	r3, #45	; 0x2d
 8003ae2:	4276      	negs	r6, r6
 8003ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ae8:	230a      	movs	r3, #10
 8003aea:	485e      	ldr	r0, [pc, #376]	; (8003c64 <_printf_i+0x244>)
 8003aec:	e019      	b.n	8003b22 <_printf_i+0x102>
 8003aee:	680e      	ldr	r6, [r1, #0]
 8003af0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003af4:	602b      	str	r3, [r5, #0]
 8003af6:	bf18      	it	ne
 8003af8:	b236      	sxthne	r6, r6
 8003afa:	e7ef      	b.n	8003adc <_printf_i+0xbc>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	1d19      	adds	r1, r3, #4
 8003b02:	6029      	str	r1, [r5, #0]
 8003b04:	0601      	lsls	r1, r0, #24
 8003b06:	d501      	bpl.n	8003b0c <_printf_i+0xec>
 8003b08:	681e      	ldr	r6, [r3, #0]
 8003b0a:	e002      	b.n	8003b12 <_printf_i+0xf2>
 8003b0c:	0646      	lsls	r6, r0, #25
 8003b0e:	d5fb      	bpl.n	8003b08 <_printf_i+0xe8>
 8003b10:	881e      	ldrh	r6, [r3, #0]
 8003b12:	2f6f      	cmp	r7, #111	; 0x6f
 8003b14:	bf0c      	ite	eq
 8003b16:	2308      	moveq	r3, #8
 8003b18:	230a      	movne	r3, #10
 8003b1a:	4852      	ldr	r0, [pc, #328]	; (8003c64 <_printf_i+0x244>)
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b22:	6865      	ldr	r5, [r4, #4]
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	bfa8      	it	ge
 8003b28:	6821      	ldrge	r1, [r4, #0]
 8003b2a:	60a5      	str	r5, [r4, #8]
 8003b2c:	bfa4      	itt	ge
 8003b2e:	f021 0104 	bicge.w	r1, r1, #4
 8003b32:	6021      	strge	r1, [r4, #0]
 8003b34:	b90e      	cbnz	r6, 8003b3a <_printf_i+0x11a>
 8003b36:	2d00      	cmp	r5, #0
 8003b38:	d04d      	beq.n	8003bd6 <_printf_i+0x1b6>
 8003b3a:	4615      	mov	r5, r2
 8003b3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b40:	fb03 6711 	mls	r7, r3, r1, r6
 8003b44:	5dc7      	ldrb	r7, [r0, r7]
 8003b46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b4a:	4637      	mov	r7, r6
 8003b4c:	42bb      	cmp	r3, r7
 8003b4e:	460e      	mov	r6, r1
 8003b50:	d9f4      	bls.n	8003b3c <_printf_i+0x11c>
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d10b      	bne.n	8003b6e <_printf_i+0x14e>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	07de      	lsls	r6, r3, #31
 8003b5a:	d508      	bpl.n	8003b6e <_printf_i+0x14e>
 8003b5c:	6923      	ldr	r3, [r4, #16]
 8003b5e:	6861      	ldr	r1, [r4, #4]
 8003b60:	4299      	cmp	r1, r3
 8003b62:	bfde      	ittt	le
 8003b64:	2330      	movle	r3, #48	; 0x30
 8003b66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b6e:	1b52      	subs	r2, r2, r5
 8003b70:	6122      	str	r2, [r4, #16]
 8003b72:	464b      	mov	r3, r9
 8003b74:	4621      	mov	r1, r4
 8003b76:	4640      	mov	r0, r8
 8003b78:	f8cd a000 	str.w	sl, [sp]
 8003b7c:	aa03      	add	r2, sp, #12
 8003b7e:	f7ff fedf 	bl	8003940 <_printf_common>
 8003b82:	3001      	adds	r0, #1
 8003b84:	d14c      	bne.n	8003c20 <_printf_i+0x200>
 8003b86:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8a:	b004      	add	sp, #16
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b90:	4834      	ldr	r0, [pc, #208]	; (8003c64 <_printf_i+0x244>)
 8003b92:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b96:	6829      	ldr	r1, [r5, #0]
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b9e:	6029      	str	r1, [r5, #0]
 8003ba0:	061d      	lsls	r5, r3, #24
 8003ba2:	d514      	bpl.n	8003bce <_printf_i+0x1ae>
 8003ba4:	07df      	lsls	r7, r3, #31
 8003ba6:	bf44      	itt	mi
 8003ba8:	f043 0320 	orrmi.w	r3, r3, #32
 8003bac:	6023      	strmi	r3, [r4, #0]
 8003bae:	b91e      	cbnz	r6, 8003bb8 <_printf_i+0x198>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	f023 0320 	bic.w	r3, r3, #32
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	2310      	movs	r3, #16
 8003bba:	e7af      	b.n	8003b1c <_printf_i+0xfc>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	f043 0320 	orr.w	r3, r3, #32
 8003bc2:	6023      	str	r3, [r4, #0]
 8003bc4:	2378      	movs	r3, #120	; 0x78
 8003bc6:	4828      	ldr	r0, [pc, #160]	; (8003c68 <_printf_i+0x248>)
 8003bc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bcc:	e7e3      	b.n	8003b96 <_printf_i+0x176>
 8003bce:	0659      	lsls	r1, r3, #25
 8003bd0:	bf48      	it	mi
 8003bd2:	b2b6      	uxthmi	r6, r6
 8003bd4:	e7e6      	b.n	8003ba4 <_printf_i+0x184>
 8003bd6:	4615      	mov	r5, r2
 8003bd8:	e7bb      	b.n	8003b52 <_printf_i+0x132>
 8003bda:	682b      	ldr	r3, [r5, #0]
 8003bdc:	6826      	ldr	r6, [r4, #0]
 8003bde:	1d18      	adds	r0, r3, #4
 8003be0:	6961      	ldr	r1, [r4, #20]
 8003be2:	6028      	str	r0, [r5, #0]
 8003be4:	0635      	lsls	r5, r6, #24
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	d501      	bpl.n	8003bee <_printf_i+0x1ce>
 8003bea:	6019      	str	r1, [r3, #0]
 8003bec:	e002      	b.n	8003bf4 <_printf_i+0x1d4>
 8003bee:	0670      	lsls	r0, r6, #25
 8003bf0:	d5fb      	bpl.n	8003bea <_printf_i+0x1ca>
 8003bf2:	8019      	strh	r1, [r3, #0]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4615      	mov	r5, r2
 8003bf8:	6123      	str	r3, [r4, #16]
 8003bfa:	e7ba      	b.n	8003b72 <_printf_i+0x152>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	1d1a      	adds	r2, r3, #4
 8003c02:	602a      	str	r2, [r5, #0]
 8003c04:	681d      	ldr	r5, [r3, #0]
 8003c06:	6862      	ldr	r2, [r4, #4]
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 f82f 	bl	8003c6c <memchr>
 8003c0e:	b108      	cbz	r0, 8003c14 <_printf_i+0x1f4>
 8003c10:	1b40      	subs	r0, r0, r5
 8003c12:	6060      	str	r0, [r4, #4]
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	6123      	str	r3, [r4, #16]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c1e:	e7a8      	b.n	8003b72 <_printf_i+0x152>
 8003c20:	462a      	mov	r2, r5
 8003c22:	4649      	mov	r1, r9
 8003c24:	4640      	mov	r0, r8
 8003c26:	6923      	ldr	r3, [r4, #16]
 8003c28:	47d0      	blx	sl
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	d0ab      	beq.n	8003b86 <_printf_i+0x166>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	079b      	lsls	r3, r3, #30
 8003c32:	d413      	bmi.n	8003c5c <_printf_i+0x23c>
 8003c34:	68e0      	ldr	r0, [r4, #12]
 8003c36:	9b03      	ldr	r3, [sp, #12]
 8003c38:	4298      	cmp	r0, r3
 8003c3a:	bfb8      	it	lt
 8003c3c:	4618      	movlt	r0, r3
 8003c3e:	e7a4      	b.n	8003b8a <_printf_i+0x16a>
 8003c40:	2301      	movs	r3, #1
 8003c42:	4632      	mov	r2, r6
 8003c44:	4649      	mov	r1, r9
 8003c46:	4640      	mov	r0, r8
 8003c48:	47d0      	blx	sl
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d09b      	beq.n	8003b86 <_printf_i+0x166>
 8003c4e:	3501      	adds	r5, #1
 8003c50:	68e3      	ldr	r3, [r4, #12]
 8003c52:	9903      	ldr	r1, [sp, #12]
 8003c54:	1a5b      	subs	r3, r3, r1
 8003c56:	42ab      	cmp	r3, r5
 8003c58:	dcf2      	bgt.n	8003c40 <_printf_i+0x220>
 8003c5a:	e7eb      	b.n	8003c34 <_printf_i+0x214>
 8003c5c:	2500      	movs	r5, #0
 8003c5e:	f104 0619 	add.w	r6, r4, #25
 8003c62:	e7f5      	b.n	8003c50 <_printf_i+0x230>
 8003c64:	08004d35 	.word	0x08004d35
 8003c68:	08004d46 	.word	0x08004d46

08003c6c <memchr>:
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	b2c9      	uxtb	r1, r1
 8003c72:	4402      	add	r2, r0
 8003c74:	4293      	cmp	r3, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	d101      	bne.n	8003c7e <memchr+0x12>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e003      	b.n	8003c86 <memchr+0x1a>
 8003c7e:	7804      	ldrb	r4, [r0, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	428c      	cmp	r4, r1
 8003c84:	d1f6      	bne.n	8003c74 <memchr+0x8>
 8003c86:	bd10      	pop	{r4, pc}

08003c88 <memcpy>:
 8003c88:	440a      	add	r2, r1
 8003c8a:	4291      	cmp	r1, r2
 8003c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c90:	d100      	bne.n	8003c94 <memcpy+0xc>
 8003c92:	4770      	bx	lr
 8003c94:	b510      	push	{r4, lr}
 8003c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c9a:	4291      	cmp	r1, r2
 8003c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ca0:	d1f9      	bne.n	8003c96 <memcpy+0xe>
 8003ca2:	bd10      	pop	{r4, pc}

08003ca4 <memmove>:
 8003ca4:	4288      	cmp	r0, r1
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	eb01 0402 	add.w	r4, r1, r2
 8003cac:	d902      	bls.n	8003cb4 <memmove+0x10>
 8003cae:	4284      	cmp	r4, r0
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	d807      	bhi.n	8003cc4 <memmove+0x20>
 8003cb4:	1e43      	subs	r3, r0, #1
 8003cb6:	42a1      	cmp	r1, r4
 8003cb8:	d008      	beq.n	8003ccc <memmove+0x28>
 8003cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cc2:	e7f8      	b.n	8003cb6 <memmove+0x12>
 8003cc4:	4601      	mov	r1, r0
 8003cc6:	4402      	add	r2, r0
 8003cc8:	428a      	cmp	r2, r1
 8003cca:	d100      	bne.n	8003cce <memmove+0x2a>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cd6:	e7f7      	b.n	8003cc8 <memmove+0x24>

08003cd8 <_free_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4605      	mov	r5, r0
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	d040      	beq.n	8003d62 <_free_r+0x8a>
 8003ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce4:	1f0c      	subs	r4, r1, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bfb8      	it	lt
 8003cea:	18e4      	addlt	r4, r4, r3
 8003cec:	f000 f910 	bl	8003f10 <__malloc_lock>
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <_free_r+0x8c>)
 8003cf2:	6813      	ldr	r3, [r2, #0]
 8003cf4:	b933      	cbnz	r3, 8003d04 <_free_r+0x2c>
 8003cf6:	6063      	str	r3, [r4, #4]
 8003cf8:	6014      	str	r4, [r2, #0]
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d00:	f000 b90c 	b.w	8003f1c <__malloc_unlock>
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d908      	bls.n	8003d1a <_free_r+0x42>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	1821      	adds	r1, r4, r0
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	bf01      	itttt	eq
 8003d10:	6819      	ldreq	r1, [r3, #0]
 8003d12:	685b      	ldreq	r3, [r3, #4]
 8003d14:	1809      	addeq	r1, r1, r0
 8003d16:	6021      	streq	r1, [r4, #0]
 8003d18:	e7ed      	b.n	8003cf6 <_free_r+0x1e>
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b10b      	cbz	r3, 8003d24 <_free_r+0x4c>
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d9fa      	bls.n	8003d1a <_free_r+0x42>
 8003d24:	6811      	ldr	r1, [r2, #0]
 8003d26:	1850      	adds	r0, r2, r1
 8003d28:	42a0      	cmp	r0, r4
 8003d2a:	d10b      	bne.n	8003d44 <_free_r+0x6c>
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	4401      	add	r1, r0
 8003d30:	1850      	adds	r0, r2, r1
 8003d32:	4283      	cmp	r3, r0
 8003d34:	6011      	str	r1, [r2, #0]
 8003d36:	d1e0      	bne.n	8003cfa <_free_r+0x22>
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4401      	add	r1, r0
 8003d3e:	6011      	str	r1, [r2, #0]
 8003d40:	6053      	str	r3, [r2, #4]
 8003d42:	e7da      	b.n	8003cfa <_free_r+0x22>
 8003d44:	d902      	bls.n	8003d4c <_free_r+0x74>
 8003d46:	230c      	movs	r3, #12
 8003d48:	602b      	str	r3, [r5, #0]
 8003d4a:	e7d6      	b.n	8003cfa <_free_r+0x22>
 8003d4c:	6820      	ldr	r0, [r4, #0]
 8003d4e:	1821      	adds	r1, r4, r0
 8003d50:	428b      	cmp	r3, r1
 8003d52:	bf01      	itttt	eq
 8003d54:	6819      	ldreq	r1, [r3, #0]
 8003d56:	685b      	ldreq	r3, [r3, #4]
 8003d58:	1809      	addeq	r1, r1, r0
 8003d5a:	6021      	streq	r1, [r4, #0]
 8003d5c:	6063      	str	r3, [r4, #4]
 8003d5e:	6054      	str	r4, [r2, #4]
 8003d60:	e7cb      	b.n	8003cfa <_free_r+0x22>
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	20000574 	.word	0x20000574

08003d68 <sbrk_aligned>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4e0e      	ldr	r6, [pc, #56]	; (8003da4 <sbrk_aligned+0x3c>)
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	6831      	ldr	r1, [r6, #0]
 8003d70:	4605      	mov	r5, r0
 8003d72:	b911      	cbnz	r1, 8003d7a <sbrk_aligned+0x12>
 8003d74:	f000 f8bc 	bl	8003ef0 <_sbrk_r>
 8003d78:	6030      	str	r0, [r6, #0]
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f000 f8b7 	bl	8003ef0 <_sbrk_r>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	d00a      	beq.n	8003d9c <sbrk_aligned+0x34>
 8003d86:	1cc4      	adds	r4, r0, #3
 8003d88:	f024 0403 	bic.w	r4, r4, #3
 8003d8c:	42a0      	cmp	r0, r4
 8003d8e:	d007      	beq.n	8003da0 <sbrk_aligned+0x38>
 8003d90:	1a21      	subs	r1, r4, r0
 8003d92:	4628      	mov	r0, r5
 8003d94:	f000 f8ac 	bl	8003ef0 <_sbrk_r>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d101      	bne.n	8003da0 <sbrk_aligned+0x38>
 8003d9c:	f04f 34ff 	mov.w	r4, #4294967295
 8003da0:	4620      	mov	r0, r4
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	20000578 	.word	0x20000578

08003da8 <_malloc_r>:
 8003da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dac:	1ccd      	adds	r5, r1, #3
 8003dae:	f025 0503 	bic.w	r5, r5, #3
 8003db2:	3508      	adds	r5, #8
 8003db4:	2d0c      	cmp	r5, #12
 8003db6:	bf38      	it	cc
 8003db8:	250c      	movcc	r5, #12
 8003dba:	2d00      	cmp	r5, #0
 8003dbc:	4607      	mov	r7, r0
 8003dbe:	db01      	blt.n	8003dc4 <_malloc_r+0x1c>
 8003dc0:	42a9      	cmp	r1, r5
 8003dc2:	d905      	bls.n	8003dd0 <_malloc_r+0x28>
 8003dc4:	230c      	movs	r3, #12
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	4630      	mov	r0, r6
 8003dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd0:	4e2e      	ldr	r6, [pc, #184]	; (8003e8c <_malloc_r+0xe4>)
 8003dd2:	f000 f89d 	bl	8003f10 <__malloc_lock>
 8003dd6:	6833      	ldr	r3, [r6, #0]
 8003dd8:	461c      	mov	r4, r3
 8003dda:	bb34      	cbnz	r4, 8003e2a <_malloc_r+0x82>
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4638      	mov	r0, r7
 8003de0:	f7ff ffc2 	bl	8003d68 <sbrk_aligned>
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	4604      	mov	r4, r0
 8003de8:	d14d      	bne.n	8003e86 <_malloc_r+0xde>
 8003dea:	6834      	ldr	r4, [r6, #0]
 8003dec:	4626      	mov	r6, r4
 8003dee:	2e00      	cmp	r6, #0
 8003df0:	d140      	bne.n	8003e74 <_malloc_r+0xcc>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	4631      	mov	r1, r6
 8003df6:	4638      	mov	r0, r7
 8003df8:	eb04 0803 	add.w	r8, r4, r3
 8003dfc:	f000 f878 	bl	8003ef0 <_sbrk_r>
 8003e00:	4580      	cmp	r8, r0
 8003e02:	d13a      	bne.n	8003e7a <_malloc_r+0xd2>
 8003e04:	6821      	ldr	r1, [r4, #0]
 8003e06:	3503      	adds	r5, #3
 8003e08:	1a6d      	subs	r5, r5, r1
 8003e0a:	f025 0503 	bic.w	r5, r5, #3
 8003e0e:	3508      	adds	r5, #8
 8003e10:	2d0c      	cmp	r5, #12
 8003e12:	bf38      	it	cc
 8003e14:	250c      	movcc	r5, #12
 8003e16:	4638      	mov	r0, r7
 8003e18:	4629      	mov	r1, r5
 8003e1a:	f7ff ffa5 	bl	8003d68 <sbrk_aligned>
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d02b      	beq.n	8003e7a <_malloc_r+0xd2>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	442b      	add	r3, r5
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	e00e      	b.n	8003e48 <_malloc_r+0xa0>
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	1b52      	subs	r2, r2, r5
 8003e2e:	d41e      	bmi.n	8003e6e <_malloc_r+0xc6>
 8003e30:	2a0b      	cmp	r2, #11
 8003e32:	d916      	bls.n	8003e62 <_malloc_r+0xba>
 8003e34:	1961      	adds	r1, r4, r5
 8003e36:	42a3      	cmp	r3, r4
 8003e38:	6025      	str	r5, [r4, #0]
 8003e3a:	bf18      	it	ne
 8003e3c:	6059      	strne	r1, [r3, #4]
 8003e3e:	6863      	ldr	r3, [r4, #4]
 8003e40:	bf08      	it	eq
 8003e42:	6031      	streq	r1, [r6, #0]
 8003e44:	5162      	str	r2, [r4, r5]
 8003e46:	604b      	str	r3, [r1, #4]
 8003e48:	4638      	mov	r0, r7
 8003e4a:	f104 060b 	add.w	r6, r4, #11
 8003e4e:	f000 f865 	bl	8003f1c <__malloc_unlock>
 8003e52:	f026 0607 	bic.w	r6, r6, #7
 8003e56:	1d23      	adds	r3, r4, #4
 8003e58:	1af2      	subs	r2, r6, r3
 8003e5a:	d0b6      	beq.n	8003dca <_malloc_r+0x22>
 8003e5c:	1b9b      	subs	r3, r3, r6
 8003e5e:	50a3      	str	r3, [r4, r2]
 8003e60:	e7b3      	b.n	8003dca <_malloc_r+0x22>
 8003e62:	6862      	ldr	r2, [r4, #4]
 8003e64:	42a3      	cmp	r3, r4
 8003e66:	bf0c      	ite	eq
 8003e68:	6032      	streq	r2, [r6, #0]
 8003e6a:	605a      	strne	r2, [r3, #4]
 8003e6c:	e7ec      	b.n	8003e48 <_malloc_r+0xa0>
 8003e6e:	4623      	mov	r3, r4
 8003e70:	6864      	ldr	r4, [r4, #4]
 8003e72:	e7b2      	b.n	8003dda <_malloc_r+0x32>
 8003e74:	4634      	mov	r4, r6
 8003e76:	6876      	ldr	r6, [r6, #4]
 8003e78:	e7b9      	b.n	8003dee <_malloc_r+0x46>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	f000 f84c 	bl	8003f1c <__malloc_unlock>
 8003e84:	e7a1      	b.n	8003dca <_malloc_r+0x22>
 8003e86:	6025      	str	r5, [r4, #0]
 8003e88:	e7de      	b.n	8003e48 <_malloc_r+0xa0>
 8003e8a:	bf00      	nop
 8003e8c:	20000574 	.word	0x20000574

08003e90 <_realloc_r>:
 8003e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e94:	4680      	mov	r8, r0
 8003e96:	4614      	mov	r4, r2
 8003e98:	460e      	mov	r6, r1
 8003e9a:	b921      	cbnz	r1, 8003ea6 <_realloc_r+0x16>
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	f7ff bf81 	b.w	8003da8 <_malloc_r>
 8003ea6:	b92a      	cbnz	r2, 8003eb4 <_realloc_r+0x24>
 8003ea8:	f7ff ff16 	bl	8003cd8 <_free_r>
 8003eac:	4625      	mov	r5, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb4:	f000 f838 	bl	8003f28 <_malloc_usable_size_r>
 8003eb8:	4284      	cmp	r4, r0
 8003eba:	4607      	mov	r7, r0
 8003ebc:	d802      	bhi.n	8003ec4 <_realloc_r+0x34>
 8003ebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ec2:	d812      	bhi.n	8003eea <_realloc_r+0x5a>
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	f7ff ff6e 	bl	8003da8 <_malloc_r>
 8003ecc:	4605      	mov	r5, r0
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d0ed      	beq.n	8003eae <_realloc_r+0x1e>
 8003ed2:	42bc      	cmp	r4, r7
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	bf28      	it	cs
 8003eda:	463a      	movcs	r2, r7
 8003edc:	f7ff fed4 	bl	8003c88 <memcpy>
 8003ee0:	4631      	mov	r1, r6
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f7ff fef8 	bl	8003cd8 <_free_r>
 8003ee8:	e7e1      	b.n	8003eae <_realloc_r+0x1e>
 8003eea:	4635      	mov	r5, r6
 8003eec:	e7df      	b.n	8003eae <_realloc_r+0x1e>
	...

08003ef0 <_sbrk_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	4d05      	ldr	r5, [pc, #20]	; (8003f0c <_sbrk_r+0x1c>)
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	f7fd fbc0 	bl	8001680 <_sbrk>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_sbrk_r+0x1a>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_sbrk_r+0x1a>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	2000057c 	.word	0x2000057c

08003f10 <__malloc_lock>:
 8003f10:	4801      	ldr	r0, [pc, #4]	; (8003f18 <__malloc_lock+0x8>)
 8003f12:	f000 b811 	b.w	8003f38 <__retarget_lock_acquire_recursive>
 8003f16:	bf00      	nop
 8003f18:	20000580 	.word	0x20000580

08003f1c <__malloc_unlock>:
 8003f1c:	4801      	ldr	r0, [pc, #4]	; (8003f24 <__malloc_unlock+0x8>)
 8003f1e:	f000 b80c 	b.w	8003f3a <__retarget_lock_release_recursive>
 8003f22:	bf00      	nop
 8003f24:	20000580 	.word	0x20000580

08003f28 <_malloc_usable_size_r>:
 8003f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f2c:	1f18      	subs	r0, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bfbc      	itt	lt
 8003f32:	580b      	ldrlt	r3, [r1, r0]
 8003f34:	18c0      	addlt	r0, r0, r3
 8003f36:	4770      	bx	lr

08003f38 <__retarget_lock_acquire_recursive>:
 8003f38:	4770      	bx	lr

08003f3a <__retarget_lock_release_recursive>:
 8003f3a:	4770      	bx	lr

08003f3c <_init>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr

08003f48 <_fini>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr
